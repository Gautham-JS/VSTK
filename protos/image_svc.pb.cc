// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_svc.proto

#include "image_svc.pb.h"

#include <algorithm>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
#include "google/protobuf/generated_message_tctable_impl.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;

inline constexpr UploadImageResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        exchange_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        client_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        chunk_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR UploadImageResponse::UploadImageResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct UploadImageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadImageResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadImageResponseDefaultTypeInternal() {}
  union {
    UploadImageResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadImageResponseDefaultTypeInternal _UploadImageResponse_default_instance_;

inline constexpr UploadImageRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        image_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        client_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        image_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        image_color_space_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        chunk_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        image_number_{0},
        chunk_number_{0u},
        start_chunk_number_{0u},
        end_chunk_number_{0u},
        data_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR UploadImageRequest::UploadImageRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct UploadImageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR UploadImageRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~UploadImageRequestDefaultTypeInternal() {}
  union {
    UploadImageRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 UploadImageRequestDefaultTypeInternal _UploadImageRequest_default_instance_;

inline constexpr StartImageStream::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        src_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        topic_prefix_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        topic_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR StartImageStream::StartImageStream(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct StartImageStreamDefaultTypeInternal {
  PROTOBUF_CONSTEXPR StartImageStreamDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~StartImageStreamDefaultTypeInternal() {}
  union {
    StartImageStream _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 StartImageStreamDefaultTypeInternal _StartImageStream_default_instance_;

inline constexpr ManageExchangeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        state_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        error_message_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR ManageExchangeResponse::ManageExchangeResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ManageExchangeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ManageExchangeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ManageExchangeResponseDefaultTypeInternal() {}
  union {
    ManageExchangeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ManageExchangeResponseDefaultTypeInternal _ManageExchangeResponse_default_instance_;

inline constexpr ManageExchangeRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        state_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        io_scheme_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        processing_scheme_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        start_image_number_{0u},
        end_image_number_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR ManageExchangeRequest::ManageExchangeRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct ManageExchangeRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ManageExchangeRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ManageExchangeRequestDefaultTypeInternal() {}
  union {
    ManageExchangeRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ManageExchangeRequestDefaultTypeInternal _ManageExchangeRequest_default_instance_;

inline constexpr GetImageResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        image_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        topic_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_{0u} {}

template <typename>
PROTOBUF_CONSTEXPR GetImageResponse::GetImageResponse(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetImageResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetImageResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetImageResponseDefaultTypeInternal() {}
  union {
    GetImageResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetImageResponseDefaultTypeInternal _GetImageResponse_default_instance_;

inline constexpr GetImageRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        image_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        topic_prefix_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        topic_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR GetImageRequest::GetImageRequest(::_pbi::ConstantInitialized)
    : _impl_(::_pbi::ConstantInitialized()) {}
struct GetImageRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetImageRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetImageRequestDefaultTypeInternal() {}
  union {
    GetImageRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetImageRequestDefaultTypeInternal _GetImageRequest_default_instance_;
static ::_pb::Metadata file_level_metadata_image_5fsvc_2eproto[7];
static constexpr const ::_pb::EnumDescriptor**
    file_level_enum_descriptors_image_5fsvc_2eproto = nullptr;
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_image_5fsvc_2eproto = nullptr;
const ::uint32_t TableStruct_image_5fsvc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(
    protodesc_cold) = {
    PROTOBUF_FIELD_OFFSET(::ManageExchangeRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ManageExchangeRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ManageExchangeRequest, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::ManageExchangeRequest, _impl_.io_scheme_),
    PROTOBUF_FIELD_OFFSET(::ManageExchangeRequest, _impl_.processing_scheme_),
    PROTOBUF_FIELD_OFFSET(::ManageExchangeRequest, _impl_.exchange_id_),
    PROTOBUF_FIELD_OFFSET(::ManageExchangeRequest, _impl_.start_image_number_),
    PROTOBUF_FIELD_OFFSET(::ManageExchangeRequest, _impl_.end_image_number_),
    ~0u,
    0,
    1,
    2,
    3,
    4,
    PROTOBUF_FIELD_OFFSET(::ManageExchangeResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::ManageExchangeResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::ManageExchangeResponse, _impl_.state_),
    PROTOBUF_FIELD_OFFSET(::ManageExchangeResponse, _impl_.exchange_id_),
    PROTOBUF_FIELD_OFFSET(::ManageExchangeResponse, _impl_.error_id_),
    PROTOBUF_FIELD_OFFSET(::ManageExchangeResponse, _impl_.error_message_),
    ~0u,
    ~0u,
    0,
    1,
    PROTOBUF_FIELD_OFFSET(::UploadImageRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::UploadImageRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    PROTOBUF_FIELD_OFFSET(::UploadImageRequest, _impl_._oneof_case_[0]),
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    ::_pbi::kInvalidFieldOffsetTag,
    PROTOBUF_FIELD_OFFSET(::UploadImageRequest, _impl_.image_id_),
    PROTOBUF_FIELD_OFFSET(::UploadImageRequest, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::UploadImageRequest, _impl_.image_type_),
    PROTOBUF_FIELD_OFFSET(::UploadImageRequest, _impl_.exchange_id_),
    PROTOBUF_FIELD_OFFSET(::UploadImageRequest, _impl_.image_number_),
    PROTOBUF_FIELD_OFFSET(::UploadImageRequest, _impl_.image_color_space_),
    PROTOBUF_FIELD_OFFSET(::UploadImageRequest, _impl_.chunk_number_),
    PROTOBUF_FIELD_OFFSET(::UploadImageRequest, _impl_.chunk_id_),
    PROTOBUF_FIELD_OFFSET(::UploadImageRequest, _impl_.start_chunk_number_),
    PROTOBUF_FIELD_OFFSET(::UploadImageRequest, _impl_.end_chunk_number_),
    PROTOBUF_FIELD_OFFSET(::UploadImageRequest, _impl_.data_),
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    ~0u,
    1,
    0,
    2,
    3,
    PROTOBUF_FIELD_OFFSET(::UploadImageResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::UploadImageResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::UploadImageResponse, _impl_.exchange_id_),
    PROTOBUF_FIELD_OFFSET(::UploadImageResponse, _impl_.client_id_),
    PROTOBUF_FIELD_OFFSET(::UploadImageResponse, _impl_.chunk_id_),
    PROTOBUF_FIELD_OFFSET(::UploadImageResponse, _impl_.error_id_),
    PROTOBUF_FIELD_OFFSET(::UploadImageResponse, _impl_.error_message_),
    ~0u,
    ~0u,
    0,
    1,
    2,
    PROTOBUF_FIELD_OFFSET(::StartImageStream, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::StartImageStream, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::StartImageStream, _impl_.src_type_),
    PROTOBUF_FIELD_OFFSET(::StartImageStream, _impl_.topic_prefix_),
    PROTOBUF_FIELD_OFFSET(::StartImageStream, _impl_.topic_name_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::GetImageRequest, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::GetImageRequest, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::GetImageRequest, _impl_.image_id_),
    PROTOBUF_FIELD_OFFSET(::GetImageRequest, _impl_.topic_prefix_),
    PROTOBUF_FIELD_OFFSET(::GetImageRequest, _impl_.topic_name_),
    ~0u,
    ~0u,
    0,
    PROTOBUF_FIELD_OFFSET(::GetImageResponse, _impl_._has_bits_),
    PROTOBUF_FIELD_OFFSET(::GetImageResponse, _internal_metadata_),
    ~0u,  // no _extensions_
    ~0u,  // no _oneof_case_
    ~0u,  // no _weak_field_map_
    ~0u,  // no _inlined_string_donated_
    ~0u,  // no _split_
    ~0u,  // no sizeof(Split)
    PROTOBUF_FIELD_OFFSET(::GetImageResponse, _impl_.image_id_),
    PROTOBUF_FIELD_OFFSET(::GetImageResponse, _impl_.status_),
    PROTOBUF_FIELD_OFFSET(::GetImageResponse, _impl_.topic_name_),
    ~0u,
    ~0u,
    0,
};

static const ::_pbi::MigrationSchema
    schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
        {0, 14, -1, sizeof(::ManageExchangeRequest)},
        {20, 32, -1, sizeof(::ManageExchangeResponse)},
        {36, 56, -1, sizeof(::UploadImageRequest)},
        {67, 80, -1, sizeof(::UploadImageResponse)},
        {85, 96, -1, sizeof(::StartImageStream)},
        {99, 110, -1, sizeof(::GetImageRequest)},
        {113, 124, -1, sizeof(::GetImageResponse)},
};

static const ::_pb::Message* const file_default_instances[] = {
    &::_ManageExchangeRequest_default_instance_._instance,
    &::_ManageExchangeResponse_default_instance_._instance,
    &::_UploadImageRequest_default_instance_._instance,
    &::_UploadImageResponse_default_instance_._instance,
    &::_StartImageStream_default_instance_._instance,
    &::_GetImageRequest_default_instance_._instance,
    &::_GetImageResponse_default_instance_._instance,
};
const char descriptor_table_protodef_image_5fsvc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
    "\n\017image_svc.proto\"\230\002\n\025ManageExchangeRequ"
    "est\022\r\n\005state\030\001 \001(\t\022\026\n\tio_scheme\030\002 \001(\tH\000\210"
    "\001\001\022\036\n\021processing_scheme\030\003 \001(\tH\001\210\001\001\022\030\n\013ex"
    "change_id\030\004 \001(\tH\002\210\001\001\022\037\n\022start_image_numb"
    "er\030\005 \001(\rH\003\210\001\001\022\035\n\020end_image_number\030\006 \001(\rH"
    "\004\210\001\001B\014\n\n_io_schemeB\024\n\022_processing_scheme"
    "B\016\n\014_exchange_idB\025\n\023_start_image_numberB"
    "\023\n\021_end_image_number\"\216\001\n\026ManageExchangeR"
    "esponse\022\r\n\005state\030\001 \001(\t\022\023\n\013exchange_id\030\002 "
    "\001(\t\022\025\n\010error_id\030\003 \001(\tH\000\210\001\001\022\032\n\rerror_mess"
    "age\030\004 \001(\tH\001\210\001\001B\013\n\t_error_idB\020\n\016_error_me"
    "ssage\"\355\002\n\022UploadImageRequest\022\024\n\nchunk_da"
    "ta\030\001 \001(\014H\000\022\020\n\010image_id\030\002 \001(\t\022\021\n\tclient_i"
    "d\030\003 \001(\t\022\022\n\nimage_type\030\004 \001(\t\022\023\n\013exchange_"
    "id\030\005 \001(\t\022\024\n\014image_number\030\006 \001(\005\022\031\n\021image_"
    "color_space\030\007 \001(\t\022\031\n\014chunk_number\030\010 \001(\rH"
    "\001\210\001\001\022\025\n\010chunk_id\030\t \001(\tH\002\210\001\001\022\037\n\022start_chu"
    "nk_number\030\n \001(\rH\003\210\001\001\022\035\n\020end_chunk_number"
    "\030\013 \001(\rH\004\210\001\001B\006\n\004dataB\017\n\r_chunk_numberB\013\n\t"
    "_chunk_idB\025\n\023_start_chunk_numberB\023\n\021_end"
    "_chunk_number\"\263\001\n\023UploadImageResponse\022\023\n"
    "\013exchange_id\030\001 \001(\t\022\021\n\tclient_id\030\002 \001(\t\022\025\n"
    "\010chunk_id\030\003 \001(\tH\000\210\001\001\022\025\n\010error_id\030\004 \001(\tH\001"
    "\210\001\001\022\032\n\rerror_message\030\005 \001(\tH\002\210\001\001B\013\n\t_chun"
    "k_idB\013\n\t_error_idB\020\n\016_error_message\"b\n\020S"
    "tartImageStream\022\020\n\010src_type\030\001 \001(\t\022\024\n\014top"
    "ic_prefix\030\002 \001(\t\022\027\n\ntopic_name\030\003 \001(\tH\000\210\001\001"
    "B\r\n\013_topic_name\"a\n\017GetImageRequest\022\020\n\010im"
    "age_id\030\001 \001(\t\022\024\n\014topic_prefix\030\002 \001(\t\022\027\n\nto"
    "pic_name\030\003 \001(\tH\000\210\001\001B\r\n\013_topic_name\"\\\n\020Ge"
    "tImageResponse\022\020\n\010image_id\030\001 \001(\t\022\016\n\006stat"
    "us\030\002 \001(\r\022\027\n\ntopic_name\030\003 \001(\tH\000\210\001\001B\r\n\013_to"
    "pic_name2\220\001\n\013X3DSService\022<\n\013UploadImage\022"
    "\023.UploadImageRequest\032\024.UploadImageRespon"
    "se\"\000(\001\022C\n\016ManageExchange\022\026.ManageExchang"
    "eRequest\032\027.ManageExchangeResponse\"\000b\006pro"
    "to3"
};
static ::absl::once_flag descriptor_table_image_5fsvc_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_image_5fsvc_2eproto = {
    false,
    false,
    1443,
    descriptor_table_protodef_image_5fsvc_2eproto,
    "image_svc.proto",
    &descriptor_table_image_5fsvc_2eproto_once,
    nullptr,
    0,
    7,
    schemas,
    file_default_instances,
    TableStruct_image_5fsvc_2eproto::offsets,
    file_level_metadata_image_5fsvc_2eproto,
    file_level_enum_descriptors_image_5fsvc_2eproto,
    file_level_service_descriptors_image_5fsvc_2eproto,
};

// This function exists to be marked as weak.
// It can significantly speed up compilation by breaking up LLVM's SCC
// in the .pb.cc translation units. Large translation units see a
// reduction of more than 35% of walltime for optimized builds. Without
// the weak attribute all the messages in the file, including all the
// vtables and everything they use become part of the same SCC through
// a cycle like:
// GetMetadata -> descriptor table -> default instances ->
//   vtables -> GetMetadata
// By adding a weak function here we break the connection from the
// individual vtables back into the descriptor table.
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_image_5fsvc_2eproto_getter() {
  return &descriptor_table_image_5fsvc_2eproto;
}
// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2
static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_image_5fsvc_2eproto(&descriptor_table_image_5fsvc_2eproto);
// ===================================================================

class ManageExchangeRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<ManageExchangeRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ManageExchangeRequest, _impl_._has_bits_);
  static void set_has_io_scheme(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_processing_scheme(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_exchange_id(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_start_image_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_end_image_number(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

ManageExchangeRequest::ManageExchangeRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ManageExchangeRequest)
}
inline PROTOBUF_NDEBUG_INLINE ManageExchangeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        state_(arena, from.state_),
        io_scheme_(arena, from.io_scheme_),
        processing_scheme_(arena, from.processing_scheme_),
        exchange_id_(arena, from.exchange_id_) {}

ManageExchangeRequest::ManageExchangeRequest(
    ::google::protobuf::Arena* arena,
    const ManageExchangeRequest& from)
    : ::google::protobuf::Message(arena) {
  ManageExchangeRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_image_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, start_image_number_),
           offsetof(Impl_, end_image_number_) -
               offsetof(Impl_, start_image_number_) +
               sizeof(Impl_::end_image_number_));

  // @@protoc_insertion_point(copy_constructor:ManageExchangeRequest)
}
inline PROTOBUF_NDEBUG_INLINE ManageExchangeRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        state_(arena),
        io_scheme_(arena),
        processing_scheme_(arena),
        exchange_id_(arena) {}

inline void ManageExchangeRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_image_number_),
           0,
           offsetof(Impl_, end_image_number_) -
               offsetof(Impl_, start_image_number_) +
               sizeof(Impl_::end_image_number_));
}
ManageExchangeRequest::~ManageExchangeRequest() {
  // @@protoc_insertion_point(destructor:ManageExchangeRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ManageExchangeRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.state_.Destroy();
  _impl_.io_scheme_.Destroy();
  _impl_.processing_scheme_.Destroy();
  _impl_.exchange_id_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ManageExchangeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ManageExchangeRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.io_scheme_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.processing_scheme_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.exchange_id_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&_impl_.start_image_number_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.end_image_number_) -
        reinterpret_cast<char*>(&_impl_.start_image_number_)) + sizeof(_impl_.end_image_number_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ManageExchangeRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 0, 72, 2> ManageExchangeRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ManageExchangeRequest, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ManageExchangeRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string state = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ManageExchangeRequest, _impl_.state_)}},
    // optional string io_scheme = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(ManageExchangeRequest, _impl_.io_scheme_)}},
    // optional string processing_scheme = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 1, 0, PROTOBUF_FIELD_OFFSET(ManageExchangeRequest, _impl_.processing_scheme_)}},
    // optional string exchange_id = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 2, 0, PROTOBUF_FIELD_OFFSET(ManageExchangeRequest, _impl_.exchange_id_)}},
    // optional uint32 start_image_number = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ManageExchangeRequest, _impl_.start_image_number_), 3>(),
     {40, 3, 0, PROTOBUF_FIELD_OFFSET(ManageExchangeRequest, _impl_.start_image_number_)}},
    // optional uint32 end_image_number = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(ManageExchangeRequest, _impl_.end_image_number_), 4>(),
     {48, 4, 0, PROTOBUF_FIELD_OFFSET(ManageExchangeRequest, _impl_.end_image_number_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string state = 1;
    {PROTOBUF_FIELD_OFFSET(ManageExchangeRequest, _impl_.state_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string io_scheme = 2;
    {PROTOBUF_FIELD_OFFSET(ManageExchangeRequest, _impl_.io_scheme_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string processing_scheme = 3;
    {PROTOBUF_FIELD_OFFSET(ManageExchangeRequest, _impl_.processing_scheme_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string exchange_id = 4;
    {PROTOBUF_FIELD_OFFSET(ManageExchangeRequest, _impl_.exchange_id_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional uint32 start_image_number = 5;
    {PROTOBUF_FIELD_OFFSET(ManageExchangeRequest, _impl_.start_image_number_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 end_image_number = 6;
    {PROTOBUF_FIELD_OFFSET(ManageExchangeRequest, _impl_.end_image_number_), _Internal::kHasBitsOffset + 4, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\25\5\11\21\13\0\0\0"
    "ManageExchangeRequest"
    "state"
    "io_scheme"
    "processing_scheme"
    "exchange_id"
  }},
};

::uint8_t* ManageExchangeRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManageExchangeRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string state = 1;
  if (!this->_internal_state().empty()) {
    const std::string& _s = this->_internal_state();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ManageExchangeRequest.state");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string io_scheme = 2;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_io_scheme();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ManageExchangeRequest.io_scheme");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // optional string processing_scheme = 3;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_processing_scheme();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ManageExchangeRequest.processing_scheme");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string exchange_id = 4;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_exchange_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ManageExchangeRequest.exchange_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional uint32 start_image_number = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        5, this->_internal_start_image_number(), target);
  }

  // optional uint32 end_image_number = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        6, this->_internal_end_image_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManageExchangeRequest)
  return target;
}

::size_t ManageExchangeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManageExchangeRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string state = 1;
  if (!this->_internal_state().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_state());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string io_scheme = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_io_scheme());
    }

    // optional string processing_scheme = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_processing_scheme());
    }

    // optional string exchange_id = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_exchange_id());
    }

    // optional uint32 start_image_number = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_start_image_number());
    }

    // optional uint32 end_image_number = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_end_image_number());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ManageExchangeRequest::_class_data_ = {
    ManageExchangeRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ManageExchangeRequest::GetClassData() const {
  return &_class_data_;
}

void ManageExchangeRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ManageExchangeRequest*>(&to_msg);
  auto& from = static_cast<const ManageExchangeRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ManageExchangeRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_io_scheme(from._internal_io_scheme());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_processing_scheme(from._internal_processing_scheme());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_exchange_id(from._internal_exchange_id());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.start_image_number_ = from._impl_.start_image_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.end_image_number_ = from._impl_.end_image_number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ManageExchangeRequest::CopyFrom(const ManageExchangeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManageExchangeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ManageExchangeRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ManageExchangeRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ManageExchangeRequest::InternalSwap(ManageExchangeRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.state_, &other->_impl_.state_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.io_scheme_, &other->_impl_.io_scheme_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.processing_scheme_, &other->_impl_.processing_scheme_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, &other->_impl_.exchange_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ManageExchangeRequest, _impl_.end_image_number_)
      + sizeof(ManageExchangeRequest::_impl_.end_image_number_)
      - PROTOBUF_FIELD_OFFSET(ManageExchangeRequest, _impl_.start_image_number_)>(
          reinterpret_cast<char*>(&_impl_.start_image_number_),
          reinterpret_cast<char*>(&other->_impl_.start_image_number_));
}

::google::protobuf::Metadata ManageExchangeRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_5fsvc_2eproto_getter, &descriptor_table_image_5fsvc_2eproto_once,
      file_level_metadata_image_5fsvc_2eproto[0]);
}
// ===================================================================

class ManageExchangeResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<ManageExchangeResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(ManageExchangeResponse, _impl_._has_bits_);
  static void set_has_error_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

ManageExchangeResponse::ManageExchangeResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:ManageExchangeResponse)
}
inline PROTOBUF_NDEBUG_INLINE ManageExchangeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        state_(arena, from.state_),
        exchange_id_(arena, from.exchange_id_),
        error_id_(arena, from.error_id_),
        error_message_(arena, from.error_message_) {}

ManageExchangeResponse::ManageExchangeResponse(
    ::google::protobuf::Arena* arena,
    const ManageExchangeResponse& from)
    : ::google::protobuf::Message(arena) {
  ManageExchangeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:ManageExchangeResponse)
}
inline PROTOBUF_NDEBUG_INLINE ManageExchangeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        state_(arena),
        exchange_id_(arena),
        error_id_(arena),
        error_message_(arena) {}

inline void ManageExchangeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
ManageExchangeResponse::~ManageExchangeResponse() {
  // @@protoc_insertion_point(destructor:ManageExchangeResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void ManageExchangeResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.state_.Destroy();
  _impl_.exchange_id_.Destroy();
  _impl_.error_id_.Destroy();
  _impl_.error_message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void ManageExchangeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ManageExchangeResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.state_.ClearToEmpty();
  _impl_.exchange_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.error_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.error_message_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* ManageExchangeResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 68, 2> ManageExchangeResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ManageExchangeResponse, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_ManageExchangeResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    // optional string error_message = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(ManageExchangeResponse, _impl_.error_message_)}},
    // string state = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(ManageExchangeResponse, _impl_.state_)}},
    // string exchange_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(ManageExchangeResponse, _impl_.exchange_id_)}},
    // optional string error_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(ManageExchangeResponse, _impl_.error_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string state = 1;
    {PROTOBUF_FIELD_OFFSET(ManageExchangeResponse, _impl_.state_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange_id = 2;
    {PROTOBUF_FIELD_OFFSET(ManageExchangeResponse, _impl_.exchange_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string error_id = 3;
    {PROTOBUF_FIELD_OFFSET(ManageExchangeResponse, _impl_.error_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string error_message = 4;
    {PROTOBUF_FIELD_OFFSET(ManageExchangeResponse, _impl_.error_message_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\26\5\13\10\15\0\0\0"
    "ManageExchangeResponse"
    "state"
    "exchange_id"
    "error_id"
    "error_message"
  }},
};

::uint8_t* ManageExchangeResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ManageExchangeResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string state = 1;
  if (!this->_internal_state().empty()) {
    const std::string& _s = this->_internal_state();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ManageExchangeResponse.state");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string exchange_id = 2;
  if (!this->_internal_exchange_id().empty()) {
    const std::string& _s = this->_internal_exchange_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ManageExchangeResponse.exchange_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string error_id = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_error_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ManageExchangeResponse.error_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string error_message = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_error_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "ManageExchangeResponse.error_message");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ManageExchangeResponse)
  return target;
}

::size_t ManageExchangeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ManageExchangeResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string state = 1;
  if (!this->_internal_state().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_state());
  }

  // string exchange_id = 2;
  if (!this->_internal_exchange_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string error_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_error_id());
    }

    // optional string error_message = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_error_message());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData ManageExchangeResponse::_class_data_ = {
    ManageExchangeResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* ManageExchangeResponse::GetClassData() const {
  return &_class_data_;
}

void ManageExchangeResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<ManageExchangeResponse*>(&to_msg);
  auto& from = static_cast<const ManageExchangeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:ManageExchangeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_state().empty()) {
    _this->_internal_set_state(from._internal_state());
  }
  if (!from._internal_exchange_id().empty()) {
    _this->_internal_set_exchange_id(from._internal_exchange_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_error_id(from._internal_error_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_error_message(from._internal_error_message());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ManageExchangeResponse::CopyFrom(const ManageExchangeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ManageExchangeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool ManageExchangeResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* ManageExchangeResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void ManageExchangeResponse::InternalSwap(ManageExchangeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.state_, &other->_impl_.state_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, &other->_impl_.exchange_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_id_, &other->_impl_.error_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
}

::google::protobuf::Metadata ManageExchangeResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_5fsvc_2eproto_getter, &descriptor_table_image_5fsvc_2eproto_once,
      file_level_metadata_image_5fsvc_2eproto[1]);
}
// ===================================================================

class UploadImageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<UploadImageRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
    PROTOBUF_FIELD_OFFSET(::UploadImageRequest, _impl_._oneof_case_);
  static void set_has_chunk_number(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_chunk_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_start_chunk_number(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_end_chunk_number(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

UploadImageRequest::UploadImageRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:UploadImageRequest)
}
inline PROTOBUF_NDEBUG_INLINE UploadImageRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        image_id_(arena, from.image_id_),
        client_id_(arena, from.client_id_),
        image_type_(arena, from.image_type_),
        exchange_id_(arena, from.exchange_id_),
        image_color_space_(arena, from.image_color_space_),
        chunk_id_(arena, from.chunk_id_),
        data_{},
        _oneof_case_{from._oneof_case_[0]} {}

UploadImageRequest::UploadImageRequest(
    ::google::protobuf::Arena* arena,
    const UploadImageRequest& from)
    : ::google::protobuf::Message(arena) {
  UploadImageRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, image_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, image_number_),
           offsetof(Impl_, end_chunk_number_) -
               offsetof(Impl_, image_number_) +
               sizeof(Impl_::end_chunk_number_));
  switch (data_case()) {
    case DATA_NOT_SET:
      break;
      case kChunkData:
        new (&_impl_.data_.chunk_data_) decltype(_impl_.data_.chunk_data_){arena, from._impl_.data_.chunk_data_};
        break;
  }

  // @@protoc_insertion_point(copy_constructor:UploadImageRequest)
}
inline PROTOBUF_NDEBUG_INLINE UploadImageRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        image_id_(arena),
        client_id_(arena),
        image_type_(arena),
        exchange_id_(arena),
        image_color_space_(arena),
        chunk_id_(arena),
        data_{},
        _oneof_case_{} {}

inline void UploadImageRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, image_number_),
           0,
           offsetof(Impl_, end_chunk_number_) -
               offsetof(Impl_, image_number_) +
               sizeof(Impl_::end_chunk_number_));
}
UploadImageRequest::~UploadImageRequest() {
  // @@protoc_insertion_point(destructor:UploadImageRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UploadImageRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.image_id_.Destroy();
  _impl_.client_id_.Destroy();
  _impl_.image_type_.Destroy();
  _impl_.exchange_id_.Destroy();
  _impl_.image_color_space_.Destroy();
  _impl_.chunk_id_.Destroy();
  if (has_data()) {
    clear_data();
  }
  _impl_.~Impl_();
}

void UploadImageRequest::clear_data() {
// @@protoc_insertion_point(one_of_clear_start:UploadImageRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  switch (data_case()) {
    case kChunkData: {
      _impl_.data_.chunk_data_.Destroy();
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}


PROTOBUF_NOINLINE void UploadImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UploadImageRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_id_.ClearToEmpty();
  _impl_.client_id_.ClearToEmpty();
  _impl_.image_type_.ClearToEmpty();
  _impl_.exchange_id_.ClearToEmpty();
  _impl_.image_color_space_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.chunk_id_.ClearNonDefaultToEmpty();
  }
  _impl_.image_number_ = 0;
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.chunk_number_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.end_chunk_number_) -
        reinterpret_cast<char*>(&_impl_.chunk_number_)) + sizeof(_impl_.end_chunk_number_));
  }
  clear_data();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* UploadImageRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 0, 98, 2> UploadImageRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_UploadImageRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string image_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.image_id_)}},
    // string client_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.client_id_)}},
    // string image_type = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.image_type_)}},
    // string exchange_id = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.exchange_id_)}},
    // int32 image_number = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UploadImageRequest, _impl_.image_number_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.image_number_)}},
    // string image_color_space = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.image_color_space_)}},
    // optional uint32 chunk_number = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UploadImageRequest, _impl_.chunk_number_), 1>(),
     {64, 1, 0, PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.chunk_number_)}},
    // optional string chunk_id = 9;
    {::_pbi::TcParser::FastUS1,
     {74, 0, 0, PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.chunk_id_)}},
    // optional uint32 start_chunk_number = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UploadImageRequest, _impl_.start_chunk_number_), 2>(),
     {80, 2, 0, PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.start_chunk_number_)}},
    // optional uint32 end_chunk_number = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(UploadImageRequest, _impl_.end_chunk_number_), 3>(),
     {88, 3, 0, PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.end_chunk_number_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // bytes chunk_data = 1;
    {PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.data_.chunk_data_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kBytes | ::_fl::kRepAString)},
    // string image_id = 2;
    {PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.image_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string client_id = 3;
    {PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.client_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string image_type = 4;
    {PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.image_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange_id = 5;
    {PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.exchange_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 image_number = 6;
    {PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.image_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string image_color_space = 7;
    {PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.image_color_space_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional uint32 chunk_number = 8;
    {PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.chunk_number_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional string chunk_id = 9;
    {PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.chunk_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional uint32 start_chunk_number = 10;
    {PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.start_chunk_number_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
    // optional uint32 end_chunk_number = 11;
    {PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.end_chunk_number_), _Internal::kHasBitsOffset + 3, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUInt32)},
  }},
  // no aux_entries
  {{
    "\22\0\10\11\12\13\0\21\0\10\0\0\0\0\0\0"
    "UploadImageRequest"
    "image_id"
    "client_id"
    "image_type"
    "exchange_id"
    "image_color_space"
    "chunk_id"
  }},
};

::uint8_t* UploadImageRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UploadImageRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // bytes chunk_data = 1;
  if (data_case() == kChunkData) {
    const std::string& _s = this->_internal_chunk_data();
    target = stream->WriteBytesMaybeAliased(1, _s, target);
  }

  // string image_id = 2;
  if (!this->_internal_image_id().empty()) {
    const std::string& _s = this->_internal_image_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "UploadImageRequest.image_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  // string client_id = 3;
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "UploadImageRequest.client_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // string image_type = 4;
  if (!this->_internal_image_type().empty()) {
    const std::string& _s = this->_internal_image_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "UploadImageRequest.image_type");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // string exchange_id = 5;
  if (!this->_internal_exchange_id().empty()) {
    const std::string& _s = this->_internal_exchange_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "UploadImageRequest.exchange_id");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  // int32 image_number = 6;
  if (this->_internal_image_number() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::
        WriteInt32ToArrayWithField<6>(
            stream, this->_internal_image_number(), target);
  }

  // string image_color_space = 7;
  if (!this->_internal_image_color_space().empty()) {
    const std::string& _s = this->_internal_image_color_space();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "UploadImageRequest.image_color_space");
    target = stream->WriteStringMaybeAliased(7, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 chunk_number = 8;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        8, this->_internal_chunk_number(), target);
  }

  // optional string chunk_id = 9;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_chunk_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "UploadImageRequest.chunk_id");
    target = stream->WriteStringMaybeAliased(9, _s, target);
  }

  // optional uint32 start_chunk_number = 10;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        10, this->_internal_start_chunk_number(), target);
  }

  // optional uint32 end_chunk_number = 11;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        11, this->_internal_end_chunk_number(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UploadImageRequest)
  return target;
}

::size_t UploadImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UploadImageRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image_id = 2;
  if (!this->_internal_image_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_image_id());
  }

  // string client_id = 3;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  // string image_type = 4;
  if (!this->_internal_image_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_image_type());
  }

  // string exchange_id = 5;
  if (!this->_internal_exchange_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_id());
  }

  // string image_color_space = 7;
  if (!this->_internal_image_color_space().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_image_color_space());
  }

  // optional string chunk_id = 9;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_chunk_id());
  }

  // int32 image_number = 6;
  if (this->_internal_image_number() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
        this->_internal_image_number());
  }

  if (cached_has_bits & 0x0000000eu) {
    // optional uint32 chunk_number = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_chunk_number());
    }

    // optional uint32 start_chunk_number = 10;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_start_chunk_number());
    }

    // optional uint32 end_chunk_number = 11;
    if (cached_has_bits & 0x00000008u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
          this->_internal_end_chunk_number());
    }

  }
  switch (data_case()) {
    // bytes chunk_data = 1;
    case kChunkData: {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::BytesSize(
                                      this->_internal_chunk_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData UploadImageRequest::_class_data_ = {
    UploadImageRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* UploadImageRequest::GetClassData() const {
  return &_class_data_;
}

void UploadImageRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<UploadImageRequest*>(&to_msg);
  auto& from = static_cast<const UploadImageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UploadImageRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image_id().empty()) {
    _this->_internal_set_image_id(from._internal_image_id());
  }
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  if (!from._internal_image_type().empty()) {
    _this->_internal_set_image_type(from._internal_image_type());
  }
  if (!from._internal_exchange_id().empty()) {
    _this->_internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!from._internal_image_color_space().empty()) {
    _this->_internal_set_image_color_space(from._internal_image_color_space());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_chunk_id(from._internal_chunk_id());
  }
  if (from._internal_image_number() != 0) {
    _this->_internal_set_image_number(from._internal_image_number());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.chunk_number_ = from._impl_.chunk_number_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.start_chunk_number_ = from._impl_.start_chunk_number_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.end_chunk_number_ = from._impl_.end_chunk_number_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  switch (from.data_case()) {
    case kChunkData: {
      _this->_internal_set_chunk_data(from._internal_chunk_data());
      break;
    }
    case DATA_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UploadImageRequest::CopyFrom(const UploadImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UploadImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool UploadImageRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* UploadImageRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void UploadImageRequest::InternalSwap(UploadImageRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.image_id_, &other->_impl_.image_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, &other->_impl_.client_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.image_type_, &other->_impl_.image_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, &other->_impl_.exchange_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.image_color_space_, &other->_impl_.image_color_space_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chunk_id_, &other->_impl_.chunk_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.end_chunk_number_)
      + sizeof(UploadImageRequest::_impl_.end_chunk_number_)
      - PROTOBUF_FIELD_OFFSET(UploadImageRequest, _impl_.image_number_)>(
          reinterpret_cast<char*>(&_impl_.image_number_),
          reinterpret_cast<char*>(&other->_impl_.image_number_));
  swap(_impl_.data_, other->_impl_.data_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata UploadImageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_5fsvc_2eproto_getter, &descriptor_table_image_5fsvc_2eproto_once,
      file_level_metadata_image_5fsvc_2eproto[2]);
}
// ===================================================================

class UploadImageResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<UploadImageResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(UploadImageResponse, _impl_._has_bits_);
  static void set_has_chunk_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_error_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_error_message(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

UploadImageResponse::UploadImageResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:UploadImageResponse)
}
inline PROTOBUF_NDEBUG_INLINE UploadImageResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        exchange_id_(arena, from.exchange_id_),
        client_id_(arena, from.client_id_),
        chunk_id_(arena, from.chunk_id_),
        error_id_(arena, from.error_id_),
        error_message_(arena, from.error_message_) {}

UploadImageResponse::UploadImageResponse(
    ::google::protobuf::Arena* arena,
    const UploadImageResponse& from)
    : ::google::protobuf::Message(arena) {
  UploadImageResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:UploadImageResponse)
}
inline PROTOBUF_NDEBUG_INLINE UploadImageResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        exchange_id_(arena),
        client_id_(arena),
        chunk_id_(arena),
        error_id_(arena),
        error_message_(arena) {}

inline void UploadImageResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
UploadImageResponse::~UploadImageResponse() {
  // @@protoc_insertion_point(destructor:UploadImageResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void UploadImageResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.exchange_id_.Destroy();
  _impl_.client_id_.Destroy();
  _impl_.chunk_id_.Destroy();
  _impl_.error_id_.Destroy();
  _impl_.error_message_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void UploadImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:UploadImageResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchange_id_.ClearToEmpty();
  _impl_.client_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.chunk_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.error_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.error_message_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* UploadImageResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 5, 0, 77, 2> UploadImageResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(UploadImageResponse, _impl_._has_bits_),
    0, // no _extensions_
    5, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967264,  // skipmap
    offsetof(decltype(_table_), field_entries),
    5,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_UploadImageResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string exchange_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(UploadImageResponse, _impl_.exchange_id_)}},
    // string client_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(UploadImageResponse, _impl_.client_id_)}},
    // optional string chunk_id = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(UploadImageResponse, _impl_.chunk_id_)}},
    // optional string error_id = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 1, 0, PROTOBUF_FIELD_OFFSET(UploadImageResponse, _impl_.error_id_)}},
    // optional string error_message = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 2, 0, PROTOBUF_FIELD_OFFSET(UploadImageResponse, _impl_.error_message_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string exchange_id = 1;
    {PROTOBUF_FIELD_OFFSET(UploadImageResponse, _impl_.exchange_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string client_id = 2;
    {PROTOBUF_FIELD_OFFSET(UploadImageResponse, _impl_.client_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string chunk_id = 3;
    {PROTOBUF_FIELD_OFFSET(UploadImageResponse, _impl_.chunk_id_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string error_id = 4;
    {PROTOBUF_FIELD_OFFSET(UploadImageResponse, _impl_.error_id_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string error_message = 5;
    {PROTOBUF_FIELD_OFFSET(UploadImageResponse, _impl_.error_message_), _Internal::kHasBitsOffset + 2, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\23\13\11\10\10\15\0\0"
    "UploadImageResponse"
    "exchange_id"
    "client_id"
    "chunk_id"
    "error_id"
    "error_message"
  }},
};

::uint8_t* UploadImageResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UploadImageResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string exchange_id = 1;
  if (!this->_internal_exchange_id().empty()) {
    const std::string& _s = this->_internal_exchange_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "UploadImageResponse.exchange_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string client_id = 2;
  if (!this->_internal_client_id().empty()) {
    const std::string& _s = this->_internal_client_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "UploadImageResponse.client_id");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string chunk_id = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_chunk_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "UploadImageResponse.chunk_id");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  // optional string error_id = 4;
  if (cached_has_bits & 0x00000002u) {
    const std::string& _s = this->_internal_error_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "UploadImageResponse.error_id");
    target = stream->WriteStringMaybeAliased(4, _s, target);
  }

  // optional string error_message = 5;
  if (cached_has_bits & 0x00000004u) {
    const std::string& _s = this->_internal_error_message();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "UploadImageResponse.error_message");
    target = stream->WriteStringMaybeAliased(5, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UploadImageResponse)
  return target;
}

::size_t UploadImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UploadImageResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string exchange_id = 1;
  if (!this->_internal_exchange_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_exchange_id());
  }

  // string client_id = 2;
  if (!this->_internal_client_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_client_id());
  }

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string chunk_id = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_chunk_id());
    }

    // optional string error_id = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_error_id());
    }

    // optional string error_message = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                      this->_internal_error_message());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData UploadImageResponse::_class_data_ = {
    UploadImageResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* UploadImageResponse::GetClassData() const {
  return &_class_data_;
}

void UploadImageResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<UploadImageResponse*>(&to_msg);
  auto& from = static_cast<const UploadImageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:UploadImageResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_exchange_id().empty()) {
    _this->_internal_set_exchange_id(from._internal_exchange_id());
  }
  if (!from._internal_client_id().empty()) {
    _this->_internal_set_client_id(from._internal_client_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_chunk_id(from._internal_chunk_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_error_id(from._internal_error_id());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_error_message(from._internal_error_message());
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void UploadImageResponse::CopyFrom(const UploadImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UploadImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool UploadImageResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* UploadImageResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void UploadImageResponse::InternalSwap(UploadImageResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_id_, &other->_impl_.exchange_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.client_id_, &other->_impl_.client_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.chunk_id_, &other->_impl_.chunk_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_id_, &other->_impl_.error_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.error_message_, &other->_impl_.error_message_, arena);
}

::google::protobuf::Metadata UploadImageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_5fsvc_2eproto_getter, &descriptor_table_image_5fsvc_2eproto_once,
      file_level_metadata_image_5fsvc_2eproto[3]);
}
// ===================================================================

class StartImageStream::_Internal {
 public:
  using HasBits = decltype(std::declval<StartImageStream>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(StartImageStream, _impl_._has_bits_);
  static void set_has_topic_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

StartImageStream::StartImageStream(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:StartImageStream)
}
inline PROTOBUF_NDEBUG_INLINE StartImageStream::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        src_type_(arena, from.src_type_),
        topic_prefix_(arena, from.topic_prefix_),
        topic_name_(arena, from.topic_name_) {}

StartImageStream::StartImageStream(
    ::google::protobuf::Arena* arena,
    const StartImageStream& from)
    : ::google::protobuf::Message(arena) {
  StartImageStream* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:StartImageStream)
}
inline PROTOBUF_NDEBUG_INLINE StartImageStream::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        src_type_(arena),
        topic_prefix_(arena),
        topic_name_(arena) {}

inline void StartImageStream::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
StartImageStream::~StartImageStream() {
  // @@protoc_insertion_point(destructor:StartImageStream)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void StartImageStream::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.src_type_.Destroy();
  _impl_.topic_prefix_.Destroy();
  _impl_.topic_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void StartImageStream::Clear() {
// @@protoc_insertion_point(message_clear_start:StartImageStream)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.src_type_.ClearToEmpty();
  _impl_.topic_prefix_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.topic_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* StartImageStream::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 55, 2> StartImageStream::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(StartImageStream, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_StartImageStream_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string src_type = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(StartImageStream, _impl_.src_type_)}},
    // string topic_prefix = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(StartImageStream, _impl_.topic_prefix_)}},
    // optional string topic_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(StartImageStream, _impl_.topic_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string src_type = 1;
    {PROTOBUF_FIELD_OFFSET(StartImageStream, _impl_.src_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string topic_prefix = 2;
    {PROTOBUF_FIELD_OFFSET(StartImageStream, _impl_.topic_prefix_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string topic_name = 3;
    {PROTOBUF_FIELD_OFFSET(StartImageStream, _impl_.topic_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\20\10\14\12\0\0\0\0"
    "StartImageStream"
    "src_type"
    "topic_prefix"
    "topic_name"
  }},
};

::uint8_t* StartImageStream::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:StartImageStream)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string src_type = 1;
  if (!this->_internal_src_type().empty()) {
    const std::string& _s = this->_internal_src_type();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "StartImageStream.src_type");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string topic_prefix = 2;
  if (!this->_internal_topic_prefix().empty()) {
    const std::string& _s = this->_internal_topic_prefix();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "StartImageStream.topic_prefix");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string topic_name = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_topic_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "StartImageStream.topic_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:StartImageStream)
  return target;
}

::size_t StartImageStream::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:StartImageStream)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string src_type = 1;
  if (!this->_internal_src_type().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_src_type());
  }

  // string topic_prefix = 2;
  if (!this->_internal_topic_prefix().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_topic_prefix());
  }

  // optional string topic_name = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_topic_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData StartImageStream::_class_data_ = {
    StartImageStream::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* StartImageStream::GetClassData() const {
  return &_class_data_;
}

void StartImageStream::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<StartImageStream*>(&to_msg);
  auto& from = static_cast<const StartImageStream&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:StartImageStream)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_src_type().empty()) {
    _this->_internal_set_src_type(from._internal_src_type());
  }
  if (!from._internal_topic_prefix().empty()) {
    _this->_internal_set_topic_prefix(from._internal_topic_prefix());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_topic_name(from._internal_topic_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void StartImageStream::CopyFrom(const StartImageStream& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:StartImageStream)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool StartImageStream::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* StartImageStream::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void StartImageStream::InternalSwap(StartImageStream* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.src_type_, &other->_impl_.src_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_prefix_, &other->_impl_.topic_prefix_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_name_, &other->_impl_.topic_name_, arena);
}

::google::protobuf::Metadata StartImageStream::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_5fsvc_2eproto_getter, &descriptor_table_image_5fsvc_2eproto_once,
      file_level_metadata_image_5fsvc_2eproto[4]);
}
// ===================================================================

class GetImageRequest::_Internal {
 public:
  using HasBits = decltype(std::declval<GetImageRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetImageRequest, _impl_._has_bits_);
  static void set_has_topic_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetImageRequest::GetImageRequest(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GetImageRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetImageRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        image_id_(arena, from.image_id_),
        topic_prefix_(arena, from.topic_prefix_),
        topic_name_(arena, from.topic_name_) {}

GetImageRequest::GetImageRequest(
    ::google::protobuf::Arena* arena,
    const GetImageRequest& from)
    : ::google::protobuf::Message(arena) {
  GetImageRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);

  // @@protoc_insertion_point(copy_constructor:GetImageRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetImageRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        image_id_(arena),
        topic_prefix_(arena),
        topic_name_(arena) {}

inline void GetImageRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetImageRequest::~GetImageRequest() {
  // @@protoc_insertion_point(destructor:GetImageRequest)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetImageRequest::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.image_id_.Destroy();
  _impl_.topic_prefix_.Destroy();
  _impl_.topic_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetImageRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetImageRequest)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_id_.ClearToEmpty();
  _impl_.topic_prefix_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.topic_name_.ClearNonDefaultToEmpty();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetImageRequest::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 54, 2> GetImageRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetImageRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetImageRequest_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string image_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetImageRequest, _impl_.image_id_)}},
    // string topic_prefix = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GetImageRequest, _impl_.topic_prefix_)}},
    // optional string topic_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GetImageRequest, _impl_.topic_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string image_id = 1;
    {PROTOBUF_FIELD_OFFSET(GetImageRequest, _impl_.image_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string topic_prefix = 2;
    {PROTOBUF_FIELD_OFFSET(GetImageRequest, _impl_.topic_prefix_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string topic_name = 3;
    {PROTOBUF_FIELD_OFFSET(GetImageRequest, _impl_.topic_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\17\10\14\12\0\0\0\0"
    "GetImageRequest"
    "image_id"
    "topic_prefix"
    "topic_name"
  }},
};

::uint8_t* GetImageRequest::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetImageRequest)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string image_id = 1;
  if (!this->_internal_image_id().empty()) {
    const std::string& _s = this->_internal_image_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "GetImageRequest.image_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // string topic_prefix = 2;
  if (!this->_internal_topic_prefix().empty()) {
    const std::string& _s = this->_internal_topic_prefix();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "GetImageRequest.topic_prefix");
    target = stream->WriteStringMaybeAliased(2, _s, target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string topic_name = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_topic_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "GetImageRequest.topic_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetImageRequest)
  return target;
}

::size_t GetImageRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetImageRequest)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image_id = 1;
  if (!this->_internal_image_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_image_id());
  }

  // string topic_prefix = 2;
  if (!this->_internal_topic_prefix().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_topic_prefix());
  }

  // optional string topic_name = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_topic_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetImageRequest::_class_data_ = {
    GetImageRequest::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetImageRequest::GetClassData() const {
  return &_class_data_;
}

void GetImageRequest::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetImageRequest*>(&to_msg);
  auto& from = static_cast<const GetImageRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetImageRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image_id().empty()) {
    _this->_internal_set_image_id(from._internal_image_id());
  }
  if (!from._internal_topic_prefix().empty()) {
    _this->_internal_set_topic_prefix(from._internal_topic_prefix());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_topic_name(from._internal_topic_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetImageRequest::CopyFrom(const GetImageRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetImageRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetImageRequest::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetImageRequest::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetImageRequest::InternalSwap(GetImageRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.image_id_, &other->_impl_.image_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_prefix_, &other->_impl_.topic_prefix_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_name_, &other->_impl_.topic_name_, arena);
}

::google::protobuf::Metadata GetImageRequest::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_5fsvc_2eproto_getter, &descriptor_table_image_5fsvc_2eproto_once,
      file_level_metadata_image_5fsvc_2eproto[5]);
}
// ===================================================================

class GetImageResponse::_Internal {
 public:
  using HasBits = decltype(std::declval<GetImageResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(GetImageResponse, _impl_._has_bits_);
  static void set_has_topic_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

GetImageResponse::GetImageResponse(::google::protobuf::Arena* arena)
    : ::google::protobuf::Message(arena) {
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:GetImageResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetImageResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        image_id_(arena, from.image_id_),
        topic_name_(arena, from.topic_name_) {}

GetImageResponse::GetImageResponse(
    ::google::protobuf::Arena* arena,
    const GetImageResponse& from)
    : ::google::protobuf::Message(arena) {
  GetImageResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_);
  _impl_.status_ = from._impl_.status_;

  // @@protoc_insertion_point(copy_constructor:GetImageResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetImageResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        image_id_(arena),
        topic_name_(arena) {}

inline void GetImageResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.status_ = {};
}
GetImageResponse::~GetImageResponse() {
  // @@protoc_insertion_point(destructor:GetImageResponse)
  _internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  SharedDtor();
}
inline void GetImageResponse::SharedDtor() {
  ABSL_DCHECK(GetArena() == nullptr);
  _impl_.image_id_.Destroy();
  _impl_.topic_name_.Destroy();
  _impl_.~Impl_();
}

PROTOBUF_NOINLINE void GetImageResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:GetImageResponse)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.image_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.topic_name_.ClearNonDefaultToEmpty();
  }
  _impl_.status_ = 0u;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

const char* GetImageResponse::_InternalParse(
    const char* ptr, ::_pbi::ParseContext* ctx) {
  ptr = ::_pbi::TcParser::ParseLoop(this, ptr, ctx, &_table_.header);
  return ptr;
}


PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 43, 2> GetImageResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetImageResponse, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    &_GetImageResponse_default_instance_._instance,
    ::_pbi::TcParser::GenericFallback,  // fallback
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string image_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetImageResponse, _impl_.image_id_)}},
    // uint32 status = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetImageResponse, _impl_.status_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(GetImageResponse, _impl_.status_)}},
    // optional string topic_name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GetImageResponse, _impl_.topic_name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string image_id = 1;
    {PROTOBUF_FIELD_OFFSET(GetImageResponse, _impl_.image_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // uint32 status = 2;
    {PROTOBUF_FIELD_OFFSET(GetImageResponse, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUInt32)},
    // optional string topic_name = 3;
    {PROTOBUF_FIELD_OFFSET(GetImageResponse, _impl_.topic_name_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\20\10\0\12\0\0\0\0"
    "GetImageResponse"
    "image_id"
    "topic_name"
  }},
};

::uint8_t* GetImageResponse::_InternalSerialize(
    ::uint8_t* target,
    ::google::protobuf::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetImageResponse)
  ::uint32_t cached_has_bits = 0;
  (void)cached_has_bits;

  // string image_id = 1;
  if (!this->_internal_image_id().empty()) {
    const std::string& _s = this->_internal_image_id();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "GetImageResponse.image_id");
    target = stream->WriteStringMaybeAliased(1, _s, target);
  }

  // uint32 status = 2;
  if (this->_internal_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(
        2, this->_internal_status(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional string topic_name = 3;
  if (cached_has_bits & 0x00000001u) {
    const std::string& _s = this->_internal_topic_name();
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
        _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "GetImageResponse.topic_name");
    target = stream->WriteStringMaybeAliased(3, _s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target =
        ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
            _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetImageResponse)
  return target;
}

::size_t GetImageResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetImageResponse)
  ::size_t total_size = 0;

  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string image_id = 1;
  if (!this->_internal_image_id().empty()) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_image_id());
  }

  // optional string topic_name = 3;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                    this->_internal_topic_name());
  }

  // uint32 status = 2;
  if (this->_internal_status() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(
        this->_internal_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::google::protobuf::Message::ClassData GetImageResponse::_class_data_ = {
    GetImageResponse::MergeImpl,
    nullptr,  // OnDemandRegisterArenaDtor
};
const ::google::protobuf::Message::ClassData* GetImageResponse::GetClassData() const {
  return &_class_data_;
}

void GetImageResponse::MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg) {
  auto* const _this = static_cast<GetImageResponse*>(&to_msg);
  auto& from = static_cast<const GetImageResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:GetImageResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_image_id().empty()) {
    _this->_internal_set_image_id(from._internal_image_id());
  }
  if ((from._impl_._has_bits_[0] & 0x00000001u) != 0) {
    _this->_internal_set_topic_name(from._internal_topic_name());
  }
  if (from._internal_status() != 0) {
    _this->_internal_set_status(from._internal_status());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetImageResponse::CopyFrom(const GetImageResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetImageResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

PROTOBUF_NOINLINE bool GetImageResponse::IsInitialized() const {
  return true;
}

::_pbi::CachedSize* GetImageResponse::AccessCachedSize() const {
  return &_impl_._cached_size_;
}
void GetImageResponse::InternalSwap(GetImageResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.image_id_, &other->_impl_.image_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.topic_name_, &other->_impl_.topic_name_, arena);
        swap(_impl_.status_, other->_impl_.status_);
}

::google::protobuf::Metadata GetImageResponse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_image_5fsvc_2eproto_getter, &descriptor_table_image_5fsvc_2eproto_once,
      file_level_metadata_image_5fsvc_2eproto[6]);
}
// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
#include "google/protobuf/port_undef.inc"
