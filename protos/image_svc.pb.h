// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image_svc.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_image_5fsvc_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_image_5fsvc_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_image_5fsvc_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_image_5fsvc_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_image_5fsvc_2eproto;
class ManageExchangeRequest;
struct ManageExchangeRequestDefaultTypeInternal;
extern ManageExchangeRequestDefaultTypeInternal _ManageExchangeRequest_default_instance_;
class ManageExchangeResponse;
struct ManageExchangeResponseDefaultTypeInternal;
extern ManageExchangeResponseDefaultTypeInternal _ManageExchangeResponse_default_instance_;
class UploadImageRequest;
struct UploadImageRequestDefaultTypeInternal;
extern UploadImageRequestDefaultTypeInternal _UploadImageRequest_default_instance_;
class UploadImageResponse;
struct UploadImageResponseDefaultTypeInternal;
extern UploadImageResponseDefaultTypeInternal _UploadImageResponse_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google


// ===================================================================


// -------------------------------------------------------------------

class UploadImageResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UploadImageResponse) */ {
 public:
  inline UploadImageResponse() : UploadImageResponse(nullptr) {}
  ~UploadImageResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UploadImageResponse(::google::protobuf::internal::ConstantInitialized);

  inline UploadImageResponse(const UploadImageResponse& from)
      : UploadImageResponse(nullptr, from) {}
  UploadImageResponse(UploadImageResponse&& from) noexcept
    : UploadImageResponse() {
    *this = ::std::move(from);
  }

  inline UploadImageResponse& operator=(const UploadImageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadImageResponse& operator=(UploadImageResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadImageResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadImageResponse* internal_default_instance() {
    return reinterpret_cast<const UploadImageResponse*>(
               &_UploadImageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UploadImageResponse& a, UploadImageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadImageResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadImageResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadImageResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadImageResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UploadImageResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UploadImageResponse& from) {
    UploadImageResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UploadImageResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "UploadImageResponse";
  }
  protected:
  explicit UploadImageResponse(::google::protobuf::Arena* arena);
  UploadImageResponse(::google::protobuf::Arena* arena, const UploadImageResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExchangeIdFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kChunkIdFieldNumber = 3,
    kErrorIdFieldNumber = 4,
    kErrorMessageFieldNumber = 5,
  };
  // string exchange_id = 1;
  void clear_exchange_id() ;
  const std::string& exchange_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* value);

  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_id();

  public:
  // string client_id = 2;
  void clear_client_id() ;
  const std::string& client_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* value);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // optional string chunk_id = 3;
  bool has_chunk_id() const;
  void clear_chunk_id() ;
  const std::string& chunk_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chunk_id(Arg_&& arg, Args_... args);
  std::string* mutable_chunk_id();
  PROTOBUF_NODISCARD std::string* release_chunk_id();
  void set_allocated_chunk_id(std::string* value);

  private:
  const std::string& _internal_chunk_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk_id(
      const std::string& value);
  std::string* _internal_mutable_chunk_id();

  public:
  // optional string error_id = 4;
  bool has_error_id() const;
  void clear_error_id() ;
  const std::string& error_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_id(Arg_&& arg, Args_... args);
  std::string* mutable_error_id();
  PROTOBUF_NODISCARD std::string* release_error_id();
  void set_allocated_error_id(std::string* value);

  private:
  const std::string& _internal_error_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_id(
      const std::string& value);
  std::string* _internal_mutable_error_id();

  public:
  // optional string error_message = 5;
  bool has_error_message() const;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // @@protoc_insertion_point(class_scope:UploadImageResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      77, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr exchange_id_;
    ::google::protobuf::internal::ArenaStringPtr client_id_;
    ::google::protobuf::internal::ArenaStringPtr chunk_id_;
    ::google::protobuf::internal::ArenaStringPtr error_id_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_5fsvc_2eproto;
};// -------------------------------------------------------------------

class UploadImageRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:UploadImageRequest) */ {
 public:
  inline UploadImageRequest() : UploadImageRequest(nullptr) {}
  ~UploadImageRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR UploadImageRequest(::google::protobuf::internal::ConstantInitialized);

  inline UploadImageRequest(const UploadImageRequest& from)
      : UploadImageRequest(nullptr, from) {}
  UploadImageRequest(UploadImageRequest&& from) noexcept
    : UploadImageRequest() {
    *this = ::std::move(from);
  }

  inline UploadImageRequest& operator=(const UploadImageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadImageRequest& operator=(UploadImageRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadImageRequest& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kChunkData = 1,
    DATA_NOT_SET = 0,
  };

  static inline const UploadImageRequest* internal_default_instance() {
    return reinterpret_cast<const UploadImageRequest*>(
               &_UploadImageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UploadImageRequest& a, UploadImageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadImageRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadImageRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadImageRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadImageRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const UploadImageRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const UploadImageRequest& from) {
    UploadImageRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(UploadImageRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "UploadImageRequest";
  }
  protected:
  explicit UploadImageRequest(::google::protobuf::Arena* arena);
  UploadImageRequest(::google::protobuf::Arena* arena, const UploadImageRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageIdFieldNumber = 2,
    kClientIdFieldNumber = 3,
    kImageTypeFieldNumber = 4,
    kExchangeIdFieldNumber = 5,
    kImageColorSpaceFieldNumber = 7,
    kChunkIdFieldNumber = 9,
    kImageNumberFieldNumber = 6,
    kChunkNumberFieldNumber = 8,
    kStartChunkNumberFieldNumber = 10,
    kEndChunkNumberFieldNumber = 11,
    kChunkDataFieldNumber = 1,
  };
  // string image_id = 2;
  void clear_image_id() ;
  const std::string& image_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image_id(Arg_&& arg, Args_... args);
  std::string* mutable_image_id();
  PROTOBUF_NODISCARD std::string* release_image_id();
  void set_allocated_image_id(std::string* value);

  private:
  const std::string& _internal_image_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_id(
      const std::string& value);
  std::string* _internal_mutable_image_id();

  public:
  // string client_id = 3;
  void clear_client_id() ;
  const std::string& client_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_client_id(Arg_&& arg, Args_... args);
  std::string* mutable_client_id();
  PROTOBUF_NODISCARD std::string* release_client_id();
  void set_allocated_client_id(std::string* value);

  private:
  const std::string& _internal_client_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_client_id(
      const std::string& value);
  std::string* _internal_mutable_client_id();

  public:
  // string image_type = 4;
  void clear_image_type() ;
  const std::string& image_type() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image_type(Arg_&& arg, Args_... args);
  std::string* mutable_image_type();
  PROTOBUF_NODISCARD std::string* release_image_type();
  void set_allocated_image_type(std::string* value);

  private:
  const std::string& _internal_image_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_type(
      const std::string& value);
  std::string* _internal_mutable_image_type();

  public:
  // string exchange_id = 5;
  void clear_exchange_id() ;
  const std::string& exchange_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* value);

  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_id();

  public:
  // string image_color_space = 7;
  void clear_image_color_space() ;
  const std::string& image_color_space() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_image_color_space(Arg_&& arg, Args_... args);
  std::string* mutable_image_color_space();
  PROTOBUF_NODISCARD std::string* release_image_color_space();
  void set_allocated_image_color_space(std::string* value);

  private:
  const std::string& _internal_image_color_space() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_image_color_space(
      const std::string& value);
  std::string* _internal_mutable_image_color_space();

  public:
  // optional string chunk_id = 9;
  bool has_chunk_id() const;
  void clear_chunk_id() ;
  const std::string& chunk_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chunk_id(Arg_&& arg, Args_... args);
  std::string* mutable_chunk_id();
  PROTOBUF_NODISCARD std::string* release_chunk_id();
  void set_allocated_chunk_id(std::string* value);

  private:
  const std::string& _internal_chunk_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk_id(
      const std::string& value);
  std::string* _internal_mutable_chunk_id();

  public:
  // int32 image_number = 6;
  void clear_image_number() ;
  ::int32_t image_number() const;
  void set_image_number(::int32_t value);

  private:
  ::int32_t _internal_image_number() const;
  void _internal_set_image_number(::int32_t value);

  public:
  // optional uint32 chunk_number = 8;
  bool has_chunk_number() const;
  void clear_chunk_number() ;
  ::uint32_t chunk_number() const;
  void set_chunk_number(::uint32_t value);

  private:
  ::uint32_t _internal_chunk_number() const;
  void _internal_set_chunk_number(::uint32_t value);

  public:
  // optional uint32 start_chunk_number = 10;
  bool has_start_chunk_number() const;
  void clear_start_chunk_number() ;
  ::uint32_t start_chunk_number() const;
  void set_start_chunk_number(::uint32_t value);

  private:
  ::uint32_t _internal_start_chunk_number() const;
  void _internal_set_start_chunk_number(::uint32_t value);

  public:
  // optional uint32 end_chunk_number = 11;
  bool has_end_chunk_number() const;
  void clear_end_chunk_number() ;
  ::uint32_t end_chunk_number() const;
  void set_end_chunk_number(::uint32_t value);

  private:
  ::uint32_t _internal_end_chunk_number() const;
  void _internal_set_end_chunk_number(::uint32_t value);

  public:
  // bytes chunk_data = 1;
  bool has_chunk_data() const;
  void clear_chunk_data() ;
  const std::string& chunk_data() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_chunk_data(Arg_&& arg, Args_... args);
  std::string* mutable_chunk_data();
  PROTOBUF_NODISCARD std::string* release_chunk_data();
  void set_allocated_chunk_data(std::string* value);

  private:
  const std::string& _internal_chunk_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chunk_data(
      const std::string& value);
  std::string* _internal_mutable_chunk_data();

  public:
  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:UploadImageRequest)
 private:
  class _Internal;
  void set_has_chunk_data();

  inline bool has_data() const;
  inline void clear_has_data();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 0,
      98, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr image_id_;
    ::google::protobuf::internal::ArenaStringPtr client_id_;
    ::google::protobuf::internal::ArenaStringPtr image_type_;
    ::google::protobuf::internal::ArenaStringPtr exchange_id_;
    ::google::protobuf::internal::ArenaStringPtr image_color_space_;
    ::google::protobuf::internal::ArenaStringPtr chunk_id_;
    ::int32_t image_number_;
    ::uint32_t chunk_number_;
    ::uint32_t start_chunk_number_;
    ::uint32_t end_chunk_number_;
    union DataUnion {
      constexpr DataUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::google::protobuf::internal::ArenaStringPtr chunk_data_;
    } data_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_5fsvc_2eproto;
};// -------------------------------------------------------------------

class ManageExchangeResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ManageExchangeResponse) */ {
 public:
  inline ManageExchangeResponse() : ManageExchangeResponse(nullptr) {}
  ~ManageExchangeResponse() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ManageExchangeResponse(::google::protobuf::internal::ConstantInitialized);

  inline ManageExchangeResponse(const ManageExchangeResponse& from)
      : ManageExchangeResponse(nullptr, from) {}
  ManageExchangeResponse(ManageExchangeResponse&& from) noexcept
    : ManageExchangeResponse() {
    *this = ::std::move(from);
  }

  inline ManageExchangeResponse& operator=(const ManageExchangeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManageExchangeResponse& operator=(ManageExchangeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ManageExchangeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ManageExchangeResponse* internal_default_instance() {
    return reinterpret_cast<const ManageExchangeResponse*>(
               &_ManageExchangeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ManageExchangeResponse& a, ManageExchangeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ManageExchangeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManageExchangeResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ManageExchangeResponse* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ManageExchangeResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ManageExchangeResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ManageExchangeResponse& from) {
    ManageExchangeResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ManageExchangeResponse* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ManageExchangeResponse";
  }
  protected:
  explicit ManageExchangeResponse(::google::protobuf::Arena* arena);
  ManageExchangeResponse(::google::protobuf::Arena* arena, const ManageExchangeResponse& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kExchangeIdFieldNumber = 2,
    kErrorIdFieldNumber = 3,
    kErrorMessageFieldNumber = 4,
  };
  // string state = 1;
  void clear_state() ;
  const std::string& state() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* value);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // string exchange_id = 2;
  void clear_exchange_id() ;
  const std::string& exchange_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* value);

  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_id();

  public:
  // optional string error_id = 3;
  bool has_error_id() const;
  void clear_error_id() ;
  const std::string& error_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_id(Arg_&& arg, Args_... args);
  std::string* mutable_error_id();
  PROTOBUF_NODISCARD std::string* release_error_id();
  void set_allocated_error_id(std::string* value);

  private:
  const std::string& _internal_error_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_id(
      const std::string& value);
  std::string* _internal_mutable_error_id();

  public:
  // optional string error_message = 4;
  bool has_error_message() const;
  void clear_error_message() ;
  const std::string& error_message() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_error_message(Arg_&& arg, Args_... args);
  std::string* mutable_error_message();
  PROTOBUF_NODISCARD std::string* release_error_message();
  void set_allocated_error_message(std::string* value);

  private:
  const std::string& _internal_error_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error_message(
      const std::string& value);
  std::string* _internal_mutable_error_message();

  public:
  // @@protoc_insertion_point(class_scope:ManageExchangeResponse)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      68, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr state_;
    ::google::protobuf::internal::ArenaStringPtr exchange_id_;
    ::google::protobuf::internal::ArenaStringPtr error_id_;
    ::google::protobuf::internal::ArenaStringPtr error_message_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_5fsvc_2eproto;
};// -------------------------------------------------------------------

class ManageExchangeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ManageExchangeRequest) */ {
 public:
  inline ManageExchangeRequest() : ManageExchangeRequest(nullptr) {}
  ~ManageExchangeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ManageExchangeRequest(::google::protobuf::internal::ConstantInitialized);

  inline ManageExchangeRequest(const ManageExchangeRequest& from)
      : ManageExchangeRequest(nullptr, from) {}
  ManageExchangeRequest(ManageExchangeRequest&& from) noexcept
    : ManageExchangeRequest() {
    *this = ::std::move(from);
  }

  inline ManageExchangeRequest& operator=(const ManageExchangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ManageExchangeRequest& operator=(ManageExchangeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ManageExchangeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ManageExchangeRequest* internal_default_instance() {
    return reinterpret_cast<const ManageExchangeRequest*>(
               &_ManageExchangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ManageExchangeRequest& a, ManageExchangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ManageExchangeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ManageExchangeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ManageExchangeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ManageExchangeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ManageExchangeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ManageExchangeRequest& from) {
    ManageExchangeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ManageExchangeRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ManageExchangeRequest";
  }
  protected:
  explicit ManageExchangeRequest(::google::protobuf::Arena* arena);
  ManageExchangeRequest(::google::protobuf::Arena* arena, const ManageExchangeRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
    kIoSchemeFieldNumber = 2,
    kProcessingSchemeFieldNumber = 3,
    kExchangeIdFieldNumber = 4,
    kStartImageNumberFieldNumber = 5,
    kEndImageNumberFieldNumber = 6,
  };
  // string state = 1;
  void clear_state() ;
  const std::string& state() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_state(Arg_&& arg, Args_... args);
  std::string* mutable_state();
  PROTOBUF_NODISCARD std::string* release_state();
  void set_allocated_state(std::string* value);

  private:
  const std::string& _internal_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_state(
      const std::string& value);
  std::string* _internal_mutable_state();

  public:
  // optional string io_scheme = 2;
  bool has_io_scheme() const;
  void clear_io_scheme() ;
  const std::string& io_scheme() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_io_scheme(Arg_&& arg, Args_... args);
  std::string* mutable_io_scheme();
  PROTOBUF_NODISCARD std::string* release_io_scheme();
  void set_allocated_io_scheme(std::string* value);

  private:
  const std::string& _internal_io_scheme() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_io_scheme(
      const std::string& value);
  std::string* _internal_mutable_io_scheme();

  public:
  // optional string processing_scheme = 3;
  bool has_processing_scheme() const;
  void clear_processing_scheme() ;
  const std::string& processing_scheme() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_processing_scheme(Arg_&& arg, Args_... args);
  std::string* mutable_processing_scheme();
  PROTOBUF_NODISCARD std::string* release_processing_scheme();
  void set_allocated_processing_scheme(std::string* value);

  private:
  const std::string& _internal_processing_scheme() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_processing_scheme(
      const std::string& value);
  std::string* _internal_mutable_processing_scheme();

  public:
  // optional string exchange_id = 4;
  bool has_exchange_id() const;
  void clear_exchange_id() ;
  const std::string& exchange_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_exchange_id(Arg_&& arg, Args_... args);
  std::string* mutable_exchange_id();
  PROTOBUF_NODISCARD std::string* release_exchange_id();
  void set_allocated_exchange_id(std::string* value);

  private:
  const std::string& _internal_exchange_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_exchange_id(
      const std::string& value);
  std::string* _internal_mutable_exchange_id();

  public:
  // optional uint32 start_image_number = 5;
  bool has_start_image_number() const;
  void clear_start_image_number() ;
  ::uint32_t start_image_number() const;
  void set_start_image_number(::uint32_t value);

  private:
  ::uint32_t _internal_start_image_number() const;
  void _internal_set_start_image_number(::uint32_t value);

  public:
  // optional uint32 end_image_number = 6;
  bool has_end_image_number() const;
  void clear_end_image_number() ;
  ::uint32_t end_image_number() const;
  void set_end_image_number(::uint32_t value);

  private:
  ::uint32_t _internal_end_image_number() const;
  void _internal_set_end_image_number(::uint32_t value);

  public:
  // @@protoc_insertion_point(class_scope:ManageExchangeRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 0,
      72, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr state_;
    ::google::protobuf::internal::ArenaStringPtr io_scheme_;
    ::google::protobuf::internal::ArenaStringPtr processing_scheme_;
    ::google::protobuf::internal::ArenaStringPtr exchange_id_;
    ::uint32_t start_image_number_;
    ::uint32_t end_image_number_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_image_5fsvc_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ManageExchangeRequest

// string state = 1;
inline void ManageExchangeRequest::clear_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.ClearToEmpty();
}
inline const std::string& ManageExchangeRequest::state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ManageExchangeRequest.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ManageExchangeRequest::set_state(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ManageExchangeRequest.state)
}
inline std::string* ManageExchangeRequest::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:ManageExchangeRequest.state)
  return _s;
}
inline const std::string& ManageExchangeRequest::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.state_.Get();
}
inline void ManageExchangeRequest::_internal_set_state(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_.Set(value, GetArena());
}
inline std::string* ManageExchangeRequest::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.state_.Mutable( GetArena());
}
inline std::string* ManageExchangeRequest::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ManageExchangeRequest.state)
  return _impl_.state_.Release();
}
inline void ManageExchangeRequest::set_allocated_state(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_.IsDefault()) {
          _impl_.state_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ManageExchangeRequest.state)
}

// optional string io_scheme = 2;
inline bool ManageExchangeRequest::has_io_scheme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ManageExchangeRequest::clear_io_scheme() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.io_scheme_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ManageExchangeRequest::io_scheme() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ManageExchangeRequest.io_scheme)
  return _internal_io_scheme();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ManageExchangeRequest::set_io_scheme(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.io_scheme_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ManageExchangeRequest.io_scheme)
}
inline std::string* ManageExchangeRequest::mutable_io_scheme() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_io_scheme();
  // @@protoc_insertion_point(field_mutable:ManageExchangeRequest.io_scheme)
  return _s;
}
inline const std::string& ManageExchangeRequest::_internal_io_scheme() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.io_scheme_.Get();
}
inline void ManageExchangeRequest::_internal_set_io_scheme(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.io_scheme_.Set(value, GetArena());
}
inline std::string* ManageExchangeRequest::_internal_mutable_io_scheme() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.io_scheme_.Mutable( GetArena());
}
inline std::string* ManageExchangeRequest::release_io_scheme() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ManageExchangeRequest.io_scheme)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.io_scheme_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.io_scheme_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ManageExchangeRequest::set_allocated_io_scheme(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.io_scheme_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.io_scheme_.IsDefault()) {
          _impl_.io_scheme_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ManageExchangeRequest.io_scheme)
}

// optional string processing_scheme = 3;
inline bool ManageExchangeRequest::has_processing_scheme() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ManageExchangeRequest::clear_processing_scheme() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.processing_scheme_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ManageExchangeRequest::processing_scheme() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ManageExchangeRequest.processing_scheme)
  return _internal_processing_scheme();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ManageExchangeRequest::set_processing_scheme(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.processing_scheme_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ManageExchangeRequest.processing_scheme)
}
inline std::string* ManageExchangeRequest::mutable_processing_scheme() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_processing_scheme();
  // @@protoc_insertion_point(field_mutable:ManageExchangeRequest.processing_scheme)
  return _s;
}
inline const std::string& ManageExchangeRequest::_internal_processing_scheme() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.processing_scheme_.Get();
}
inline void ManageExchangeRequest::_internal_set_processing_scheme(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.processing_scheme_.Set(value, GetArena());
}
inline std::string* ManageExchangeRequest::_internal_mutable_processing_scheme() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.processing_scheme_.Mutable( GetArena());
}
inline std::string* ManageExchangeRequest::release_processing_scheme() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ManageExchangeRequest.processing_scheme)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.processing_scheme_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.processing_scheme_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ManageExchangeRequest::set_allocated_processing_scheme(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.processing_scheme_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.processing_scheme_.IsDefault()) {
          _impl_.processing_scheme_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ManageExchangeRequest.processing_scheme)
}

// optional string exchange_id = 4;
inline bool ManageExchangeRequest::has_exchange_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void ManageExchangeRequest::clear_exchange_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ManageExchangeRequest::exchange_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ManageExchangeRequest.exchange_id)
  return _internal_exchange_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ManageExchangeRequest::set_exchange_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.exchange_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ManageExchangeRequest.exchange_id)
}
inline std::string* ManageExchangeRequest::mutable_exchange_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:ManageExchangeRequest.exchange_id)
  return _s;
}
inline const std::string& ManageExchangeRequest::_internal_exchange_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exchange_id_.Get();
}
inline void ManageExchangeRequest::_internal_set_exchange_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.exchange_id_.Set(value, GetArena());
}
inline std::string* ManageExchangeRequest::_internal_mutable_exchange_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.exchange_id_.Mutable( GetArena());
}
inline std::string* ManageExchangeRequest::release_exchange_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ManageExchangeRequest.exchange_id)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.exchange_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.exchange_id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ManageExchangeRequest::set_allocated_exchange_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.exchange_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_id_.IsDefault()) {
          _impl_.exchange_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ManageExchangeRequest.exchange_id)
}

// optional uint32 start_image_number = 5;
inline bool ManageExchangeRequest::has_start_image_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void ManageExchangeRequest::clear_start_image_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_image_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t ManageExchangeRequest::start_image_number() const {
  // @@protoc_insertion_point(field_get:ManageExchangeRequest.start_image_number)
  return _internal_start_image_number();
}
inline void ManageExchangeRequest::set_start_image_number(::uint32_t value) {
  _internal_set_start_image_number(value);
  // @@protoc_insertion_point(field_set:ManageExchangeRequest.start_image_number)
}
inline ::uint32_t ManageExchangeRequest::_internal_start_image_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_image_number_;
}
inline void ManageExchangeRequest::_internal_set_start_image_number(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.start_image_number_ = value;
}

// optional uint32 end_image_number = 6;
inline bool ManageExchangeRequest::has_end_image_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void ManageExchangeRequest::clear_end_image_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_image_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::uint32_t ManageExchangeRequest::end_image_number() const {
  // @@protoc_insertion_point(field_get:ManageExchangeRequest.end_image_number)
  return _internal_end_image_number();
}
inline void ManageExchangeRequest::set_end_image_number(::uint32_t value) {
  _internal_set_end_image_number(value);
  // @@protoc_insertion_point(field_set:ManageExchangeRequest.end_image_number)
}
inline ::uint32_t ManageExchangeRequest::_internal_end_image_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_image_number_;
}
inline void ManageExchangeRequest::_internal_set_end_image_number(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.end_image_number_ = value;
}

// -------------------------------------------------------------------

// ManageExchangeResponse

// string state = 1;
inline void ManageExchangeResponse::clear_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.ClearToEmpty();
}
inline const std::string& ManageExchangeResponse::state() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ManageExchangeResponse.state)
  return _internal_state();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ManageExchangeResponse::set_state(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ManageExchangeResponse.state)
}
inline std::string* ManageExchangeResponse::mutable_state() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_state();
  // @@protoc_insertion_point(field_mutable:ManageExchangeResponse.state)
  return _s;
}
inline const std::string& ManageExchangeResponse::_internal_state() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.state_.Get();
}
inline void ManageExchangeResponse::_internal_set_state(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.state_.Set(value, GetArena());
}
inline std::string* ManageExchangeResponse::_internal_mutable_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.state_.Mutable( GetArena());
}
inline std::string* ManageExchangeResponse::release_state() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ManageExchangeResponse.state)
  return _impl_.state_.Release();
}
inline void ManageExchangeResponse::set_allocated_state(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.state_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.state_.IsDefault()) {
          _impl_.state_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ManageExchangeResponse.state)
}

// string exchange_id = 2;
inline void ManageExchangeResponse::clear_exchange_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_id_.ClearToEmpty();
}
inline const std::string& ManageExchangeResponse::exchange_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ManageExchangeResponse.exchange_id)
  return _internal_exchange_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ManageExchangeResponse::set_exchange_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ManageExchangeResponse.exchange_id)
}
inline std::string* ManageExchangeResponse::mutable_exchange_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:ManageExchangeResponse.exchange_id)
  return _s;
}
inline const std::string& ManageExchangeResponse::_internal_exchange_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exchange_id_.Get();
}
inline void ManageExchangeResponse::_internal_set_exchange_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_id_.Set(value, GetArena());
}
inline std::string* ManageExchangeResponse::_internal_mutable_exchange_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.exchange_id_.Mutable( GetArena());
}
inline std::string* ManageExchangeResponse::release_exchange_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ManageExchangeResponse.exchange_id)
  return _impl_.exchange_id_.Release();
}
inline void ManageExchangeResponse::set_allocated_exchange_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_id_.IsDefault()) {
          _impl_.exchange_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ManageExchangeResponse.exchange_id)
}

// optional string error_id = 3;
inline bool ManageExchangeResponse::has_error_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void ManageExchangeResponse::clear_error_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ManageExchangeResponse::error_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ManageExchangeResponse.error_id)
  return _internal_error_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ManageExchangeResponse::set_error_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ManageExchangeResponse.error_id)
}
inline std::string* ManageExchangeResponse::mutable_error_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_id();
  // @@protoc_insertion_point(field_mutable:ManageExchangeResponse.error_id)
  return _s;
}
inline const std::string& ManageExchangeResponse::_internal_error_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_id_.Get();
}
inline void ManageExchangeResponse::_internal_set_error_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.error_id_.Set(value, GetArena());
}
inline std::string* ManageExchangeResponse::_internal_mutable_error_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.error_id_.Mutable( GetArena());
}
inline std::string* ManageExchangeResponse::release_error_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ManageExchangeResponse.error_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.error_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ManageExchangeResponse::set_allocated_error_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.error_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_id_.IsDefault()) {
          _impl_.error_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ManageExchangeResponse.error_id)
}

// optional string error_message = 4;
inline bool ManageExchangeResponse::has_error_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void ManageExchangeResponse::clear_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ManageExchangeResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ManageExchangeResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ManageExchangeResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ManageExchangeResponse.error_message)
}
inline std::string* ManageExchangeResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:ManageExchangeResponse.error_message)
  return _s;
}
inline const std::string& ManageExchangeResponse::_internal_error_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_message_.Get();
}
inline void ManageExchangeResponse::_internal_set_error_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* ManageExchangeResponse::_internal_mutable_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* ManageExchangeResponse::release_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ManageExchangeResponse.error_message)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.error_message_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void ManageExchangeResponse::set_allocated_error_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.error_message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_message_.IsDefault()) {
          _impl_.error_message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ManageExchangeResponse.error_message)
}

// -------------------------------------------------------------------

// UploadImageRequest

// bytes chunk_data = 1;
inline bool UploadImageRequest::has_chunk_data() const {
  return data_case() == kChunkData;
}
inline void UploadImageRequest::set_has_chunk_data() {
  _impl_._oneof_case_[0] = kChunkData;
}
inline void UploadImageRequest::clear_chunk_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (data_case() == kChunkData) {
    _impl_.data_.chunk_data_.Destroy();
    clear_has_data();
  }
}
inline const std::string& UploadImageRequest::chunk_data() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UploadImageRequest.chunk_data)
  return _internal_chunk_data();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadImageRequest::set_chunk_data(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (data_case() != kChunkData) {
    clear_data();

    set_has_chunk_data();
    _impl_.data_.chunk_data_.InitDefault();
  }
  _impl_.data_.chunk_data_.SetBytes(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UploadImageRequest.chunk_data)
}
inline std::string* UploadImageRequest::mutable_chunk_data() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chunk_data();
  // @@protoc_insertion_point(field_mutable:UploadImageRequest.chunk_data)
  return _s;
}
inline const std::string& UploadImageRequest::_internal_chunk_data() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  if (data_case() != kChunkData) {
    return ::google::protobuf::internal::GetEmptyStringAlreadyInited();
  }
  return _impl_.data_.chunk_data_.Get();
}
inline void UploadImageRequest::_internal_set_chunk_data(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (data_case() != kChunkData) {
    clear_data();

    set_has_chunk_data();
    _impl_.data_.chunk_data_.InitDefault();
  }
  _impl_.data_.chunk_data_.Set(value, GetArena());
}
inline std::string* UploadImageRequest::_internal_mutable_chunk_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (data_case() != kChunkData) {
    clear_data();

    set_has_chunk_data();
    _impl_.data_.chunk_data_.InitDefault();
  }
  return _impl_.data_.chunk_data_.Mutable( GetArena());
}
inline std::string* UploadImageRequest::release_chunk_data() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:UploadImageRequest.chunk_data)
  if (data_case() != kChunkData) {
    return nullptr;
  }
  clear_has_data();
  return _impl_.data_.chunk_data_.Release();
}
inline void UploadImageRequest::set_allocated_chunk_data(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (has_data()) {
    clear_data();
  }
  if (value != nullptr) {
    set_has_chunk_data();
    _impl_.data_.chunk_data_.InitAllocated(value, GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:UploadImageRequest.chunk_data)
}

// string image_id = 2;
inline void UploadImageRequest::clear_image_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_id_.ClearToEmpty();
}
inline const std::string& UploadImageRequest::image_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UploadImageRequest.image_id)
  return _internal_image_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadImageRequest::set_image_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UploadImageRequest.image_id)
}
inline std::string* UploadImageRequest::mutable_image_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image_id();
  // @@protoc_insertion_point(field_mutable:UploadImageRequest.image_id)
  return _s;
}
inline const std::string& UploadImageRequest::_internal_image_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.image_id_.Get();
}
inline void UploadImageRequest::_internal_set_image_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_id_.Set(value, GetArena());
}
inline std::string* UploadImageRequest::_internal_mutable_image_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.image_id_.Mutable( GetArena());
}
inline std::string* UploadImageRequest::release_image_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:UploadImageRequest.image_id)
  return _impl_.image_id_.Release();
}
inline void UploadImageRequest::set_allocated_image_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_id_.IsDefault()) {
          _impl_.image_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UploadImageRequest.image_id)
}

// string client_id = 3;
inline void UploadImageRequest::clear_client_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& UploadImageRequest::client_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UploadImageRequest.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadImageRequest::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UploadImageRequest.client_id)
}
inline std::string* UploadImageRequest::mutable_client_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:UploadImageRequest.client_id)
  return _s;
}
inline const std::string& UploadImageRequest::_internal_client_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.client_id_.Get();
}
inline void UploadImageRequest::_internal_set_client_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.client_id_.Set(value, GetArena());
}
inline std::string* UploadImageRequest::_internal_mutable_client_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.client_id_.Mutable( GetArena());
}
inline std::string* UploadImageRequest::release_client_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:UploadImageRequest.client_id)
  return _impl_.client_id_.Release();
}
inline void UploadImageRequest::set_allocated_client_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.client_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UploadImageRequest.client_id)
}

// string image_type = 4;
inline void UploadImageRequest::clear_image_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_type_.ClearToEmpty();
}
inline const std::string& UploadImageRequest::image_type() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UploadImageRequest.image_type)
  return _internal_image_type();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadImageRequest::set_image_type(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_type_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UploadImageRequest.image_type)
}
inline std::string* UploadImageRequest::mutable_image_type() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image_type();
  // @@protoc_insertion_point(field_mutable:UploadImageRequest.image_type)
  return _s;
}
inline const std::string& UploadImageRequest::_internal_image_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.image_type_.Get();
}
inline void UploadImageRequest::_internal_set_image_type(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_type_.Set(value, GetArena());
}
inline std::string* UploadImageRequest::_internal_mutable_image_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.image_type_.Mutable( GetArena());
}
inline std::string* UploadImageRequest::release_image_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:UploadImageRequest.image_type)
  return _impl_.image_type_.Release();
}
inline void UploadImageRequest::set_allocated_image_type(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_type_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_type_.IsDefault()) {
          _impl_.image_type_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UploadImageRequest.image_type)
}

// string exchange_id = 5;
inline void UploadImageRequest::clear_exchange_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_id_.ClearToEmpty();
}
inline const std::string& UploadImageRequest::exchange_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UploadImageRequest.exchange_id)
  return _internal_exchange_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadImageRequest::set_exchange_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UploadImageRequest.exchange_id)
}
inline std::string* UploadImageRequest::mutable_exchange_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:UploadImageRequest.exchange_id)
  return _s;
}
inline const std::string& UploadImageRequest::_internal_exchange_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exchange_id_.Get();
}
inline void UploadImageRequest::_internal_set_exchange_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_id_.Set(value, GetArena());
}
inline std::string* UploadImageRequest::_internal_mutable_exchange_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.exchange_id_.Mutable( GetArena());
}
inline std::string* UploadImageRequest::release_exchange_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:UploadImageRequest.exchange_id)
  return _impl_.exchange_id_.Release();
}
inline void UploadImageRequest::set_allocated_exchange_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_id_.IsDefault()) {
          _impl_.exchange_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UploadImageRequest.exchange_id)
}

// int32 image_number = 6;
inline void UploadImageRequest::clear_image_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_number_ = 0;
}
inline ::int32_t UploadImageRequest::image_number() const {
  // @@protoc_insertion_point(field_get:UploadImageRequest.image_number)
  return _internal_image_number();
}
inline void UploadImageRequest::set_image_number(::int32_t value) {
  _internal_set_image_number(value);
  // @@protoc_insertion_point(field_set:UploadImageRequest.image_number)
}
inline ::int32_t UploadImageRequest::_internal_image_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.image_number_;
}
inline void UploadImageRequest::_internal_set_image_number(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_number_ = value;
}

// string image_color_space = 7;
inline void UploadImageRequest::clear_image_color_space() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_color_space_.ClearToEmpty();
}
inline const std::string& UploadImageRequest::image_color_space() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UploadImageRequest.image_color_space)
  return _internal_image_color_space();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadImageRequest::set_image_color_space(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_color_space_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UploadImageRequest.image_color_space)
}
inline std::string* UploadImageRequest::mutable_image_color_space() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_image_color_space();
  // @@protoc_insertion_point(field_mutable:UploadImageRequest.image_color_space)
  return _s;
}
inline const std::string& UploadImageRequest::_internal_image_color_space() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.image_color_space_.Get();
}
inline void UploadImageRequest::_internal_set_image_color_space(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.image_color_space_.Set(value, GetArena());
}
inline std::string* UploadImageRequest::_internal_mutable_image_color_space() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.image_color_space_.Mutable( GetArena());
}
inline std::string* UploadImageRequest::release_image_color_space() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:UploadImageRequest.image_color_space)
  return _impl_.image_color_space_.Release();
}
inline void UploadImageRequest::set_allocated_image_color_space(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.image_color_space_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.image_color_space_.IsDefault()) {
          _impl_.image_color_space_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UploadImageRequest.image_color_space)
}

// optional uint32 chunk_number = 8;
inline bool UploadImageRequest::has_chunk_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UploadImageRequest::clear_chunk_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chunk_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::uint32_t UploadImageRequest::chunk_number() const {
  // @@protoc_insertion_point(field_get:UploadImageRequest.chunk_number)
  return _internal_chunk_number();
}
inline void UploadImageRequest::set_chunk_number(::uint32_t value) {
  _internal_set_chunk_number(value);
  // @@protoc_insertion_point(field_set:UploadImageRequest.chunk_number)
}
inline ::uint32_t UploadImageRequest::_internal_chunk_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chunk_number_;
}
inline void UploadImageRequest::_internal_set_chunk_number(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.chunk_number_ = value;
}

// optional string chunk_id = 9;
inline bool UploadImageRequest::has_chunk_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UploadImageRequest::clear_chunk_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chunk_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UploadImageRequest::chunk_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UploadImageRequest.chunk_id)
  return _internal_chunk_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadImageRequest::set_chunk_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.chunk_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UploadImageRequest.chunk_id)
}
inline std::string* UploadImageRequest::mutable_chunk_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chunk_id();
  // @@protoc_insertion_point(field_mutable:UploadImageRequest.chunk_id)
  return _s;
}
inline const std::string& UploadImageRequest::_internal_chunk_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chunk_id_.Get();
}
inline void UploadImageRequest::_internal_set_chunk_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.chunk_id_.Set(value, GetArena());
}
inline std::string* UploadImageRequest::_internal_mutable_chunk_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.chunk_id_.Mutable( GetArena());
}
inline std::string* UploadImageRequest::release_chunk_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:UploadImageRequest.chunk_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.chunk_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.chunk_id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UploadImageRequest::set_allocated_chunk_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chunk_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chunk_id_.IsDefault()) {
          _impl_.chunk_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UploadImageRequest.chunk_id)
}

// optional uint32 start_chunk_number = 10;
inline bool UploadImageRequest::has_start_chunk_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void UploadImageRequest::clear_start_chunk_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.start_chunk_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::uint32_t UploadImageRequest::start_chunk_number() const {
  // @@protoc_insertion_point(field_get:UploadImageRequest.start_chunk_number)
  return _internal_start_chunk_number();
}
inline void UploadImageRequest::set_start_chunk_number(::uint32_t value) {
  _internal_set_start_chunk_number(value);
  // @@protoc_insertion_point(field_set:UploadImageRequest.start_chunk_number)
}
inline ::uint32_t UploadImageRequest::_internal_start_chunk_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.start_chunk_number_;
}
inline void UploadImageRequest::_internal_set_start_chunk_number(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.start_chunk_number_ = value;
}

// optional uint32 end_chunk_number = 11;
inline bool UploadImageRequest::has_end_chunk_number() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline void UploadImageRequest::clear_end_chunk_number() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.end_chunk_number_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::uint32_t UploadImageRequest::end_chunk_number() const {
  // @@protoc_insertion_point(field_get:UploadImageRequest.end_chunk_number)
  return _internal_end_chunk_number();
}
inline void UploadImageRequest::set_end_chunk_number(::uint32_t value) {
  _internal_set_end_chunk_number(value);
  // @@protoc_insertion_point(field_set:UploadImageRequest.end_chunk_number)
}
inline ::uint32_t UploadImageRequest::_internal_end_chunk_number() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.end_chunk_number_;
}
inline void UploadImageRequest::_internal_set_end_chunk_number(::uint32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.end_chunk_number_ = value;
}

inline bool UploadImageRequest::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void UploadImageRequest::clear_has_data() {
  _impl_._oneof_case_[0] = DATA_NOT_SET;
}
inline UploadImageRequest::DataCase UploadImageRequest::data_case() const {
  return UploadImageRequest::DataCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// UploadImageResponse

// string exchange_id = 1;
inline void UploadImageResponse::clear_exchange_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_id_.ClearToEmpty();
}
inline const std::string& UploadImageResponse::exchange_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UploadImageResponse.exchange_id)
  return _internal_exchange_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadImageResponse::set_exchange_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UploadImageResponse.exchange_id)
}
inline std::string* UploadImageResponse::mutable_exchange_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_exchange_id();
  // @@protoc_insertion_point(field_mutable:UploadImageResponse.exchange_id)
  return _s;
}
inline const std::string& UploadImageResponse::_internal_exchange_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.exchange_id_.Get();
}
inline void UploadImageResponse::_internal_set_exchange_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.exchange_id_.Set(value, GetArena());
}
inline std::string* UploadImageResponse::_internal_mutable_exchange_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.exchange_id_.Mutable( GetArena());
}
inline std::string* UploadImageResponse::release_exchange_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:UploadImageResponse.exchange_id)
  return _impl_.exchange_id_.Release();
}
inline void UploadImageResponse::set_allocated_exchange_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.exchange_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.exchange_id_.IsDefault()) {
          _impl_.exchange_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UploadImageResponse.exchange_id)
}

// string client_id = 2;
inline void UploadImageResponse::clear_client_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.client_id_.ClearToEmpty();
}
inline const std::string& UploadImageResponse::client_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UploadImageResponse.client_id)
  return _internal_client_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadImageResponse::set_client_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.client_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UploadImageResponse.client_id)
}
inline std::string* UploadImageResponse::mutable_client_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_client_id();
  // @@protoc_insertion_point(field_mutable:UploadImageResponse.client_id)
  return _s;
}
inline const std::string& UploadImageResponse::_internal_client_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.client_id_.Get();
}
inline void UploadImageResponse::_internal_set_client_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.client_id_.Set(value, GetArena());
}
inline std::string* UploadImageResponse::_internal_mutable_client_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.client_id_.Mutable( GetArena());
}
inline std::string* UploadImageResponse::release_client_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:UploadImageResponse.client_id)
  return _impl_.client_id_.Release();
}
inline void UploadImageResponse::set_allocated_client_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.client_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.client_id_.IsDefault()) {
          _impl_.client_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UploadImageResponse.client_id)
}

// optional string chunk_id = 3;
inline bool UploadImageResponse::has_chunk_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void UploadImageResponse::clear_chunk_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.chunk_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UploadImageResponse::chunk_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UploadImageResponse.chunk_id)
  return _internal_chunk_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadImageResponse::set_chunk_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.chunk_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UploadImageResponse.chunk_id)
}
inline std::string* UploadImageResponse::mutable_chunk_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_chunk_id();
  // @@protoc_insertion_point(field_mutable:UploadImageResponse.chunk_id)
  return _s;
}
inline const std::string& UploadImageResponse::_internal_chunk_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.chunk_id_.Get();
}
inline void UploadImageResponse::_internal_set_chunk_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.chunk_id_.Set(value, GetArena());
}
inline std::string* UploadImageResponse::_internal_mutable_chunk_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.chunk_id_.Mutable( GetArena());
}
inline std::string* UploadImageResponse::release_chunk_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:UploadImageResponse.chunk_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.chunk_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.chunk_id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UploadImageResponse::set_allocated_chunk_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.chunk_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.chunk_id_.IsDefault()) {
          _impl_.chunk_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UploadImageResponse.chunk_id)
}

// optional string error_id = 4;
inline bool UploadImageResponse::has_error_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void UploadImageResponse::clear_error_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UploadImageResponse::error_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UploadImageResponse.error_id)
  return _internal_error_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadImageResponse::set_error_id(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UploadImageResponse.error_id)
}
inline std::string* UploadImageResponse::mutable_error_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_id();
  // @@protoc_insertion_point(field_mutable:UploadImageResponse.error_id)
  return _s;
}
inline const std::string& UploadImageResponse::_internal_error_id() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_id_.Get();
}
inline void UploadImageResponse::_internal_set_error_id(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.error_id_.Set(value, GetArena());
}
inline std::string* UploadImageResponse::_internal_mutable_error_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.error_id_.Mutable( GetArena());
}
inline std::string* UploadImageResponse::release_error_id() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:UploadImageResponse.error_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.error_id_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_id_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UploadImageResponse::set_allocated_error_id(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.error_id_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_id_.IsDefault()) {
          _impl_.error_id_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UploadImageResponse.error_id)
}

// optional string error_message = 5;
inline bool UploadImageResponse::has_error_message() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void UploadImageResponse::clear_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.error_message_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& UploadImageResponse::error_message() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:UploadImageResponse.error_message)
  return _internal_error_message();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void UploadImageResponse::set_error_message(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.error_message_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:UploadImageResponse.error_message)
}
inline std::string* UploadImageResponse::mutable_error_message() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_error_message();
  // @@protoc_insertion_point(field_mutable:UploadImageResponse.error_message)
  return _s;
}
inline const std::string& UploadImageResponse::_internal_error_message() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.error_message_.Get();
}
inline void UploadImageResponse::_internal_set_error_message(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.error_message_.Set(value, GetArena());
}
inline std::string* UploadImageResponse::_internal_mutable_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.error_message_.Mutable( GetArena());
}
inline std::string* UploadImageResponse::release_error_message() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:UploadImageResponse.error_message)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.error_message_.Release();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.error_message_.Set("", GetArena());
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return released;
}
inline void UploadImageResponse::set_allocated_error_message(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.error_message_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.error_message_.IsDefault()) {
          _impl_.error_message_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:UploadImageResponse.error_message)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_image_5fsvc_2eproto_2epb_2eh
