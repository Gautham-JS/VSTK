// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: image_svc.proto

#include "image_svc.pb.h"
#include "image_svc.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>

static const char* X3DSService_method_names[] = {
  "/X3DSService/UploadImage",
  "/X3DSService/ManageExchange",
};

std::unique_ptr< X3DSService::Stub> X3DSService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< X3DSService::Stub> stub(new X3DSService::Stub(channel, options));
  return stub;
}

X3DSService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UploadImage_(X3DSService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_ManageExchange_(X3DSService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::UploadImageRequest>* X3DSService::Stub::UploadImageRaw(::grpc::ClientContext* context, ::UploadImageResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::UploadImageRequest>::Create(channel_.get(), rpcmethod_UploadImage_, context, response);
}

void X3DSService::Stub::async::UploadImage(::grpc::ClientContext* context, ::UploadImageResponse* response, ::grpc::ClientWriteReactor< ::UploadImageRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::UploadImageRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_UploadImage_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::UploadImageRequest>* X3DSService::Stub::AsyncUploadImageRaw(::grpc::ClientContext* context, ::UploadImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::UploadImageRequest>::Create(channel_.get(), cq, rpcmethod_UploadImage_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::UploadImageRequest>* X3DSService::Stub::PrepareAsyncUploadImageRaw(::grpc::ClientContext* context, ::UploadImageResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::UploadImageRequest>::Create(channel_.get(), cq, rpcmethod_UploadImage_, context, response, false, nullptr);
}

::grpc::Status X3DSService::Stub::ManageExchange(::grpc::ClientContext* context, const ::ManageExchangeRequest& request, ::ManageExchangeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::ManageExchangeRequest, ::ManageExchangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ManageExchange_, context, request, response);
}

void X3DSService::Stub::async::ManageExchange(::grpc::ClientContext* context, const ::ManageExchangeRequest* request, ::ManageExchangeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::ManageExchangeRequest, ::ManageExchangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ManageExchange_, context, request, response, std::move(f));
}

void X3DSService::Stub::async::ManageExchange(::grpc::ClientContext* context, const ::ManageExchangeRequest* request, ::ManageExchangeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ManageExchange_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::ManageExchangeResponse>* X3DSService::Stub::PrepareAsyncManageExchangeRaw(::grpc::ClientContext* context, const ::ManageExchangeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::ManageExchangeResponse, ::ManageExchangeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ManageExchange_, context, request);
}

::grpc::ClientAsyncResponseReader< ::ManageExchangeResponse>* X3DSService::Stub::AsyncManageExchangeRaw(::grpc::ClientContext* context, const ::ManageExchangeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncManageExchangeRaw(context, request, cq);
  result->StartCall();
  return result;
}

X3DSService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      X3DSService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< X3DSService::Service, ::UploadImageRequest, ::UploadImageResponse>(
          [](X3DSService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::UploadImageRequest>* reader,
             ::UploadImageResponse* resp) {
               return service->UploadImage(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      X3DSService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< X3DSService::Service, ::ManageExchangeRequest, ::ManageExchangeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](X3DSService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::ManageExchangeRequest* req,
             ::ManageExchangeResponse* resp) {
               return service->ManageExchange(ctx, req, resp);
             }, this)));
}

X3DSService::Service::~Service() {
}

::grpc::Status X3DSService::Service::UploadImage(::grpc::ServerContext* context, ::grpc::ServerReader< ::UploadImageRequest>* reader, ::UploadImageResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status X3DSService::Service::ManageExchange(::grpc::ServerContext* context, const ::ManageExchangeRequest* request, ::ManageExchangeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


