// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: image_svc.proto
#ifndef GRPC_image_5fsvc_2eproto__INCLUDED
#define GRPC_image_5fsvc_2eproto__INCLUDED

#include "image_svc.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

class X3DSService final {
 public:
  static constexpr char const* service_full_name() {
    return "X3DSService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientWriterInterface< ::UploadImageRequest>> UploadImage(::grpc::ClientContext* context, ::UploadImageResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriterInterface< ::UploadImageRequest>>(UploadImageRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::UploadImageRequest>> AsyncUploadImage(::grpc::ClientContext* context, ::UploadImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::UploadImageRequest>>(AsyncUploadImageRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::UploadImageRequest>> PrepareAsyncUploadImage(::grpc::ClientContext* context, ::UploadImageResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriterInterface< ::UploadImageRequest>>(PrepareAsyncUploadImageRaw(context, response, cq));
    }
    virtual ::grpc::Status ManageExchange(::grpc::ClientContext* context, const ::ManageExchangeRequest& request, ::ManageExchangeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ManageExchangeResponse>> AsyncManageExchange(::grpc::ClientContext* context, const ::ManageExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ManageExchangeResponse>>(AsyncManageExchangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ManageExchangeResponse>> PrepareAsyncManageExchange(::grpc::ClientContext* context, const ::ManageExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::ManageExchangeResponse>>(PrepareAsyncManageExchangeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void UploadImage(::grpc::ClientContext* context, ::UploadImageResponse* response, ::grpc::ClientWriteReactor< ::UploadImageRequest>* reactor) = 0;
      virtual void ManageExchange(::grpc::ClientContext* context, const ::ManageExchangeRequest* request, ::ManageExchangeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ManageExchange(::grpc::ClientContext* context, const ::ManageExchangeRequest* request, ::ManageExchangeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientWriterInterface< ::UploadImageRequest>* UploadImageRaw(::grpc::ClientContext* context, ::UploadImageResponse* response) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::UploadImageRequest>* AsyncUploadImageRaw(::grpc::ClientContext* context, ::UploadImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncWriterInterface< ::UploadImageRequest>* PrepareAsyncUploadImageRaw(::grpc::ClientContext* context, ::UploadImageResponse* response, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ManageExchangeResponse>* AsyncManageExchangeRaw(::grpc::ClientContext* context, const ::ManageExchangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::ManageExchangeResponse>* PrepareAsyncManageExchangeRaw(::grpc::ClientContext* context, const ::ManageExchangeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientWriter< ::UploadImageRequest>> UploadImage(::grpc::ClientContext* context, ::UploadImageResponse* response) {
      return std::unique_ptr< ::grpc::ClientWriter< ::UploadImageRequest>>(UploadImageRaw(context, response));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::UploadImageRequest>> AsyncUploadImage(::grpc::ClientContext* context, ::UploadImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::UploadImageRequest>>(AsyncUploadImageRaw(context, response, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncWriter< ::UploadImageRequest>> PrepareAsyncUploadImage(::grpc::ClientContext* context, ::UploadImageResponse* response, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncWriter< ::UploadImageRequest>>(PrepareAsyncUploadImageRaw(context, response, cq));
    }
    ::grpc::Status ManageExchange(::grpc::ClientContext* context, const ::ManageExchangeRequest& request, ::ManageExchangeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ManageExchangeResponse>> AsyncManageExchange(::grpc::ClientContext* context, const ::ManageExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ManageExchangeResponse>>(AsyncManageExchangeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ManageExchangeResponse>> PrepareAsyncManageExchange(::grpc::ClientContext* context, const ::ManageExchangeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::ManageExchangeResponse>>(PrepareAsyncManageExchangeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void UploadImage(::grpc::ClientContext* context, ::UploadImageResponse* response, ::grpc::ClientWriteReactor< ::UploadImageRequest>* reactor) override;
      void ManageExchange(::grpc::ClientContext* context, const ::ManageExchangeRequest* request, ::ManageExchangeResponse* response, std::function<void(::grpc::Status)>) override;
      void ManageExchange(::grpc::ClientContext* context, const ::ManageExchangeRequest* request, ::ManageExchangeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientWriter< ::UploadImageRequest>* UploadImageRaw(::grpc::ClientContext* context, ::UploadImageResponse* response) override;
    ::grpc::ClientAsyncWriter< ::UploadImageRequest>* AsyncUploadImageRaw(::grpc::ClientContext* context, ::UploadImageResponse* response, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncWriter< ::UploadImageRequest>* PrepareAsyncUploadImageRaw(::grpc::ClientContext* context, ::UploadImageResponse* response, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ManageExchangeResponse>* AsyncManageExchangeRaw(::grpc::ClientContext* context, const ::ManageExchangeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::ManageExchangeResponse>* PrepareAsyncManageExchangeRaw(::grpc::ClientContext* context, const ::ManageExchangeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_UploadImage_;
    const ::grpc::internal::RpcMethod rpcmethod_ManageExchange_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status UploadImage(::grpc::ServerContext* context, ::grpc::ServerReader< ::UploadImageRequest>* reader, ::UploadImageResponse* response);
    virtual ::grpc::Status ManageExchange(::grpc::ServerContext* context, const ::ManageExchangeRequest* request, ::ManageExchangeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UploadImage() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::UploadImageRequest>* /*reader*/, ::UploadImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::UploadImageResponse, ::UploadImageRequest>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ManageExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ManageExchange() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ManageExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ManageExchange(::grpc::ServerContext* /*context*/, const ::ManageExchangeRequest* /*request*/, ::ManageExchangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestManageExchange(::grpc::ServerContext* context, ::ManageExchangeRequest* request, ::grpc::ServerAsyncResponseWriter< ::ManageExchangeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_UploadImage<WithAsyncMethod_ManageExchange<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UploadImage() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::UploadImageRequest, ::UploadImageResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, ::UploadImageResponse* response) { return this->UploadImage(context, response); }));
    }
    ~WithCallbackMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::UploadImageRequest>* /*reader*/, ::UploadImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::UploadImageRequest>* UploadImage(
      ::grpc::CallbackServerContext* /*context*/, ::UploadImageResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ManageExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ManageExchange() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::ManageExchangeRequest, ::ManageExchangeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::ManageExchangeRequest* request, ::ManageExchangeResponse* response) { return this->ManageExchange(context, request, response); }));}
    void SetMessageAllocatorFor_ManageExchange(
        ::grpc::MessageAllocator< ::ManageExchangeRequest, ::ManageExchangeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::ManageExchangeRequest, ::ManageExchangeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ManageExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ManageExchange(::grpc::ServerContext* /*context*/, const ::ManageExchangeRequest* /*request*/, ::ManageExchangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ManageExchange(
      ::grpc::CallbackServerContext* /*context*/, const ::ManageExchangeRequest* /*request*/, ::ManageExchangeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_UploadImage<WithCallbackMethod_ManageExchange<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UploadImage() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::UploadImageRequest>* /*reader*/, ::UploadImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ManageExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ManageExchange() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ManageExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ManageExchange(::grpc::ServerContext* /*context*/, const ::ManageExchangeRequest* /*request*/, ::ManageExchangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UploadImage() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::UploadImageRequest>* /*reader*/, ::UploadImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUploadImage(::grpc::ServerContext* context, ::grpc::ServerAsyncReader< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* reader, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncClientStreaming(0, context, reader, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ManageExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ManageExchange() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ManageExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ManageExchange(::grpc::ServerContext* /*context*/, const ::ManageExchangeRequest* /*request*/, ::ManageExchangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestManageExchange(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UploadImage : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UploadImage() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackClientStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, ::grpc::ByteBuffer* response) { return this->UploadImage(context, response); }));
    }
    ~WithRawCallbackMethod_UploadImage() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UploadImage(::grpc::ServerContext* /*context*/, ::grpc::ServerReader< ::UploadImageRequest>* /*reader*/, ::UploadImageResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerReadReactor< ::grpc::ByteBuffer>* UploadImage(
      ::grpc::CallbackServerContext* /*context*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ManageExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ManageExchange() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ManageExchange(context, request, response); }));
    }
    ~WithRawCallbackMethod_ManageExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ManageExchange(::grpc::ServerContext* /*context*/, const ::ManageExchangeRequest* /*request*/, ::ManageExchangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ManageExchange(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ManageExchange : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ManageExchange() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::ManageExchangeRequest, ::ManageExchangeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::ManageExchangeRequest, ::ManageExchangeResponse>* streamer) {
                       return this->StreamedManageExchange(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ManageExchange() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ManageExchange(::grpc::ServerContext* /*context*/, const ::ManageExchangeRequest* /*request*/, ::ManageExchangeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedManageExchange(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::ManageExchangeRequest,::ManageExchangeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ManageExchange<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ManageExchange<Service > StreamedService;
};


#endif  // GRPC_image_5fsvc_2eproto__INCLUDED
