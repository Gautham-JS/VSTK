syntax = "proto3";


enum rt_state {
  STARTED = 0;
  RUNNING = 1;
  STOPPEED = 2;
  INTERRUPTED = 3;
  ERRORED = 4;
}


enum rt_signal {
  START = 0;
  END = 1;
  INTERRUPT = 3;
}

enum slam_mode {
  MONO = 0;
  STEREO = 1;
  RGBD = 3;
}


message GetAllRTSMessage {
  optional string rt_id_filter = 1;
}

message AllRTSResponse {
  repeated string rt_id = 1;
}

message GetRTStatusMessage {
  string rt_id = 1;
  optional bool extended = 2;
}

message RTStatusResponse {
  string rt_id = 1;
  int32 rt_state = 2;
  string ft_extraction_algo = 3;
  string ft_compute_algo = 4;
  string ft_matching_algo = 5;

  bool is_extended = 6;
  optional string data_source = 7;
  optional uint32 frames_processed = 8;
  optional uint32 average_fps = 9;
}

message AdafastPropertiesMsg {
  uint32 min_count = 1;
  uint32 max_count = 2;
  uint32 min_threshold = 3;
  uint32 max_threshold = 4;
  uint32 cell_size_x = 5;
  uint32 cell_size_y = 6;
  uint32 thread_pool_size = 7;
  uint32 threshold_step_size = 8;
}

message FeaturesConfig {
  string detector_algorithm = 1;
  string compute_algorithm = 2;
  string matcher_algorithm = 3;
  optional AdafastPropertiesMsg adafast_properties = 4; 
}

message CameraParmsMsg {
  repeated double k_matrix = 3 [packed=true];
  repeated double d_vector = 4 [packed=true];
}

message StereoCameraParamsMsg {
  CameraParmsMsg left_cam = 1;
  CameraParmsMsg right_cam = 2;

  repeated double r_matrix = 7 [packed=true];
  repeated double t_vector = 8 [packed=true];
  repeated double e_matrix = 9 [packed=true];
  repeated double f_matrix = 10 [packed=true];
}

message CreateStereoRTRequest {
  string data_src_left_stereo = 1;
  string data_src_right_stereo = 2;

  StereoCameraParamsMsg camera_params = 3;
  
  FeaturesConfig feature_detector_config = 4;

  optional string rt_id = 5;
  optional bool override_state = 6;
}

message ManageRTRequest {
  string rt_id = 1;
  int32 rt_signal = 2;
  optional string additional_info = 3;
}

message CommonRTResponse {
	int32 rt_state = 1;
	string rt_id = 2;
	
	optional string error_id = 3;
	optional string error_message = 4;
}

// request for upload request
message UploadImageRequest {
  oneof data {
    bytes chunk_data = 1;
  };
  string image_id = 2;
  string client_id = 3;
  string image_type = 4;
  string exchange_id = 5;
  
  int32 image_number = 6;
  string image_color_space = 7;
  optional uint32 chunk_number = 8;
  optional string chunk_id = 9;
  optional uint32 start_chunk_number = 10;
  optional uint32 end_chunk_number = 11;
}

message UploadImageResponse {
  string exchange_id = 1;
  string client_id = 2;
  
  optional string chunk_id = 3;
  
  
  optional string error_id = 4;
  optional string error_message = 5;
}

message StartImageStream {
  string src_type = 1;
  string topic_prefix = 2;
  optional string topic_name = 3;

}

message GetImageRequest {
  string image_id = 1;
  string topic_prefix = 2;
  optional string topic_name = 3;
}

message GetImageResponse {
  string image_id = 1;
  uint32 status = 2;
  optional string topic_name = 3;
}



service VstkService {
  // rpc UploadImage(stream UploadImageRequest) returns (UploadImageResponse) {};
  // rpc ManageExchange(ManageExchangeRequest) returns (ManageExchangeResponse) {};

  rpc CreateStereoRuntime(CreateStereoRTRequest) returns (CommonRTResponse) {};
  rpc ManageRuntime(ManageRTRequest) returns (CommonRTResponse) {};
  rpc GetAllRTs(GetAllRTSMessage) returns (AllRTSResponse) {};
  rpc GetRTStatus(GetRTStatusMessage) returns (RTStatusResponse) {};
}